# integration tests:
# * run C code through FrontEndC to generate Cwerg IR
# * optimize IR
# * generate C code via CodeGenC

NANO_SRC = FrontEndC/TestData/nanojpeg.c

STDLIB_DIR=${PWD}/StdLib
STDLIB32=${STDLIB_DIR}/std_lib.32.asm
STDLIB64=${STDLIB_DIR}/std_lib.64.asm

CC_FLAGS = -Wall -Wno-unused-result -Wno-unused-label -Wno-unused-variable \
   -Wno-maybe-uninitialized \
   -Wno-builtin-declaration-mismatch -Wno-unused-but-set-variable -Wno-main \
   -Wno-misleading-indentation -Wno-builtin-declaration-mismatch \
   -Wno-non-literal-null-conversion -I$(STDLIB_DIR)

tests: itests nano32 nano64

# this is separate from ITESTS because we verify the output differently
nano64:
	@echo "[$@"]
	#
	md5sum TestData/ash_tree.ppm
	@echo "[$@: baseline]"
	$(CC) -Dprint_s_ln=puts $(CC_FLAGS) -O $(NANO_SRC) -o $@.cc.exe
	@rm -f $@.ppm.out
	./$@.cc.exe TestData/ash_tree.jpg $@.ppm.out
	md5sum $@.ppm.out
	@cmp -l $@.ppm.out TestData/ash_tree.ppm
	#
	@echo "[$@: cwerg 64 test]"
	$(PYPY) FrontEndC/translate.py  --cpp_args=-IStdLib --mode=64  $(NANO_SRC) > $@.64.asm
	cat StdLib/syscall.extern64.asm  StdLib/std_lib.64.asm $@.64.asm | $(PYPY)  CodeGenC/codegen.py - > $@.64.out.c
	$(CC) $(CC_FLAGS) -O -static -m64 -nostdlib StdLib/syscall.c $@.64.out.c -o $@.64.cc.exe
	@rm -f $@.ppm.out
	./$@.64.cc.exe TestData/ash_tree.jpg $@.ppm.out
	md5sum $@.ppm.out
	@cmp -l $@.ppm.out TestData/ash_tree.ppm
	#
	@echo "[$@: cwerg optimize 64 test]"
	$(PYPY) FrontEndC/translate.py --cpp_args=-IStdLib --mode=64 $(NANO_SRC) > $@.64.asm
	cat StdLib/syscall.extern64.asm StdLib/std_lib.64.asm $@.64.asm | $(PYPY)  Base/optimize.py  > $@.64.opt.asm
	$(PYPY) CodeGenC/codegen.py $@.64.opt.asm > $@.64.out.c
	$(CC) $(CC_FLAGS) -O -static -m64 -nostdlib StdLib/syscall.c $@.64.out.c -o $@.64.cc.exe
	@rm -f $@.ppm.out
	./$@.64.cc.exe TestData/ash_tree.jpg $@.ppm.out
	md5sum $@.ppm.out
	@cmp -l $@.ppm.out TestData/ash_tree.ppm
	#
	@echo "[$@: cwerg canned 64 test]"
	cat $(STDLIB_DIR)/syscall.extern64.asm $(STDLIB_DIR)/std_lib.64.asm TestData/nano_jpeg.64.asm | $(PYPY) CodeGenC/codegen.py - > $@.64.out.c
	$(CC) $(CC_FLAGS) -O -static -m64 -nostdlib StdLib/syscall.c $@.64.out.c -o $@.64.cc.exe
	@rm -f $@.ppm.out
	./$@.64.cc.exe TestData/ash_tree.jpg $@.ppm.out
	md5sum $@.ppm.out
	@cmp -l $@.ppm.out TestData/ash_tree.ppm
	#
	@echo OK

# this is separate from ITESTS because we verify the output differently
nano32:
	@echo "[$@"]
	#
	md5sum TestData/ash_tree.ppm
	@echo "[$@: baseline]"
	$(CC) -Dprint_s_ln=puts $(CC_FLAGS) -O $(NANO_SRC) -o $@.cc.exe
	@rm -f $@.ppm.out
	./$@.cc.exe TestData/ash_tree.jpg $@.ppm.out
	md5sum $@.ppm.out
	@cmp -l $@.ppm.out TestData/ash_tree.ppm
	#
	@echo "[$@: cwerg 32 test]"
	$(PYPY) FrontEndC/translate.py  --cpp_args=-IStdLib --mode=32  $(NANO_SRC) > $@.32.asm
	cat StdLib/syscall.extern32.asm  StdLib/std_lib.32.asm $@.32.asm | $(PYPY) CodeGenC/codegen.py - > $@.32.out.c
	$(CC) $(CC_FLAGS) -O -static -m32 -nostdlib StdLib/syscall.c $@.32.out.c -o $@.32.cc.exe
	@rm -f $@.ppm.out
	./$@.32.cc.exe TestData/ash_tree.jpg $@.ppm.out
	md5sum $@.ppm.out
	@cmp -l $@.ppm.out TestData/ash_tree.ppm
	#
	@echo "[$@: cwerg optimize 32 test]"
	$(PYPY) FrontEndC/translate.py --cpp_args=-IStdLib --mode=32 $(NANO_SRC) > $@.32.asm
	cat StdLib/syscall.extern32.asm StdLib/std_lib.32.asm $@.32.asm | $(PYPY) Base/optimize.py  > $@.32.opt.asm
	$(PYPY) CodeGenC/codegen.py $@.32.opt.asm > $@.32.out.c
	$(CC) $(CC_FLAGS) -O -static -m32 -nostdlib StdLib/syscall.c $@.32.out.c -o $@.32.cc.exe
	@rm -f $@.ppm.out
	./$@.32.cc.exe TestData/ash_tree.jpg $@.ppm.out
	md5sum $@.ppm.out
	@cmp -l $@.ppm.out TestData/ash_tree.ppm
	#
	@echo "[$@: cwerg canned 32 test]"
	cat $(STDLIB_DIR)/syscall.extern32.asm $(STDLIB_DIR)/std_lib.32.asm TestData/nano_jpeg.32.asm | $(PYPY) CodeGenC/codegen.py - > $@.32.out.c
	$(CC) $(CC_FLAGS) -O -static -m32 -nostdlib StdLib/syscall.c $@.32.out.c -o $@.32.cc.exe
	@rm -f $@.ppm.out
	./$@.32.cc.exe TestData/ash_tree.jpg $@.ppm.out
	md5sum $@.ppm.out
	@cmp -l $@.ppm.out TestData/ash_tree.ppm
	#
	@echo OK

ITESTS = \
FrontEndC/TestData/struct2.c \
FrontEndC/TestData/2003-07-08-BitOpsTest.c \
FrontEndC/TestData/corner_cases.c \
FrontEndC/TestData/20080424-1.c\
FrontEndC/TestData/20000523-1.c \
FrontEndC/TestData/sumarray.c \
FrontEndC/TestData/nqueen.c \
FrontEndC/TestData/20020129-1.c \
FrontEndC/TestData/sieve.c \
FrontEndC/TestData/pfannkuchen.c



# takes a c source files, translates to either 32bit or 64bit Cwerg IR
# optionally optimizes the IR and then translates the IR back to C code
%.itest : %.c
	@echo "[$@]"
	#
	@echo "[$@ - 64]"
	$(PYPY) FrontEndC/translate.py --cpp_args=-IStdLib --mode=64 $? > $@.64.asm
	cat StdLib/syscall.extern64.asm StdLib/std_lib.64.asm  $@.64.asm | $(PYPY) CodeGenC/codegen.py - >$@.64.out.c
	$(CC) $(CC_FLAGS) -O -static -m64 -nostdlib StdLib/syscall.c $@.64.out.c -o $@.64.cc.exe
	./$@.64.cc.exe > $@.run.out
	diff $@.run.out $*.reference_output
	#
	@echo "[$@ - 32]"
	$(PYPY) FrontEndC/translate.py --cpp_args=-IStdLib --mode=32 $? > $@.32.asm
	cat StdLib/syscall.extern32.asm StdLib/std_lib.32.asm  $@.32.asm | $(PYPY) CodeGenC/codegen.py - > $@.32.out.c
	$(CC) $(CC_FLAGS) -O -static -m32 -nostdlib StdLib/syscall.c $@.32.out.c -o $@.32.cc.exe
	./$@.32.cc.exe > $@.run.out
	diff $@.run.out $*.reference_output
	#
	@echo "[$@ - 64 opt]"
	$(PYPY) FrontEndC/translate.py --cpp_args=-IStdLib --mode=64  $? > $@.64.asm
	cat StdLib/syscall.extern64.asm StdLib/std_lib.64.asm  $@.64.asm | $(PYPY) Base/optimize.py > $@.64.opt.asm
	$(PYPY) CodeGenC/codegen.py $@.64.opt.asm > $@.64.out.c
	$(CC) $(CC_FLAGS) -O -static -m64 -nostdlib StdLib/syscall.c $@.64.out.c -o $@.64.cc.exe
	./$@.64.cc.exe > $@.run.out
	diff $@.run.out $*.reference_output
	#
	@echo "[$@ - 32 opt]"
	$(PYPY) FrontEndC/translate.py --cpp_args=-IStdLib --mode=32 $? > $@.32.asm
	cat StdLib/syscall.extern32.asm StdLib/std_lib.32.asm  $@.32.asm | $(PYPY) Base/optimize.py > $@.32.opt.asm
	$(PYPY) CodeGenC/codegen.py $@.32.opt.asm > $@.32.out.c
	$(CC) $(CC_FLAGS) -O -static -m32 -nostdlib StdLib/syscall.c $@.32.out.c -o $@.32.cc.exe
	./$@.32.cc.exe > $@.run.out
	diff $@.run.out $*.reference_output

itests: $(ITESTS:.c=.itest)

clean:
	rm -f nano.* FrontEndC/TestData/*exe  FrontEndC/TestData/*out FrontEndC/TestData/*out.c FrontEndC/TestData/*asm

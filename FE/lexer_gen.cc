#include "FE/lexer_gen.h"

#include <map>

namespace cwerg::fe {

#define REP3(a) a, a, a
#define REP4(a) a, a, a, a
#define REP5(a) a, a, a, a, a
#define REP6(a) a, a, a, a, a, a
#define REP7(a) a, a, a, a, a, a, a
#define REP8(a) a, a, a, a, a, a, a, a
#define REP9(a) a, a, a, a, a, a, a, a, a
#define REP10(a) a, a, a, a, a, a, a, a, a, a
#define REP11(a) a, a, a, a, a, a, a, a, a, a, a
#define REP12(a) a, a, a, a, a, a, a, a, a, a, a, a
#define REP13(a) a, a, a, a, a, a, a, a, a, a, a, a, a
#define REP14(a) a, a, a, a, a, a, a, a, a, a, a, a, a, a
#define REP15(a) a, a, a, a, a, a, a, a, a, a, a, a, a, a, a
#define REP16(a) a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a

// clang-format off
/* @AUTOGEN-START@ */
#define VAL(x) 212 + uint16_t(TK_KIND::x)

#define VALX(x) 245 + uint16_t(TK_KIND::x)

uint16_t TrieNodeCount = 212;

uint16_t KeywordAndOpRecognizer[212][128] = {
    {REP16(0),
     REP16(0),
     0, 211, VAL(STR), 0, 0, 208, 210, VAL(CHAR), VAL(PAREN_OPEN), VAL(PAREN_CLOSED), 208, 209, VAL(COMMA), 209, VAL(DOT_OP), 208,
     REP10(0), VAL(COLON), VAL(COMMENT), 206, 205, 202, VAL(TERNARY_OP),
     201, REP15(0),
     REP11(0), 200, 0, VAL(SQUARE_CLOSED), 199, 0,
     0, 195, 183, 177, 174, 169, 160, 155, 0, 152, 0, 0, 150, 135, 125, 120,
     110, 0, 105, 80, 64, 31, 22, 5, 4, 0, 0, 3, 2, VAL(CURLY_CLOSED), 1, 0},

    {REP16(VALX(ADD_OP)),
     REP16(VALX(ADD_OP)),
     REP16(VALX(ADD_OP)),
     REP13(VALX(ADD_OP)), VAL(COMPOUND_ASSIGN), VALX(ADD_OP), VALX(ADD_OP),
     REP16(VALX(ADD_OP)),
     REP16(VALX(ADD_OP)),
     REP16(VALX(ADD_OP)),
     REP16(VALX(ADD_OP))},

    {REP16(VALX(ADD_OP)),
     REP16(VALX(ADD_OP)),
     REP16(VALX(ADD_OP)),
     REP13(VALX(ADD_OP)), VAL(COMPOUND_ASSIGN), VALX(ADD_OP), VALX(ADD_OP),
     REP16(VALX(ADD_OP)),
     REP16(VALX(ADD_OP)),
     REP16(VALX(ADD_OP)),
     REP12(VALX(ADD_OP)), VAL(OR_SC_OP), REP3(VALX(ADD_OP))},

    {REP16(VALX(CURLY_OPEN)),
     REP16(VALX(CURLY_OPEN)),
     REP16(VALX(CURLY_OPEN)),
     REP16(VALX(CURLY_OPEN)),
     REP16(VALX(CURLY_OPEN)),
     REP16(VALX(CURLY_OPEN)),
     REP16(VALX(CURLY_OPEN)),
     REP11(VALX(CURLY_OPEN)), VAL(GENERIC_ANNOTATION), REP4(VALX(CURLY_OPEN))},

    {REP16(0),
     REP16(0),
     0, 0, VAL(STR), REP13(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP8(0), 19, 15, REP6(0),
     0, 0, 6, REP13(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     0, 7, REP14(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     8, REP15(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP15(0), 12,
     REP16(0),
     9, REP15(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP5(0), 10, REP10(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP4(0), 11, REP11(0),
     REP16(0)},

    {REP16(VALX(ANNOTATION)),
     REP16(VALX(ANNOTATION)),
     REP4(VALX(ANNOTATION)), 0, REP11(VALX(ANNOTATION)),
     REP10(0), REP6(VALX(ANNOTATION)),
     VALX(ANNOTATION), REP15(0),
     REP11(0), REP4(VALX(ANNOTATION)), 0,
     VALX(ANNOTATION), REP15(0),
     REP11(0), REP5(VALX(ANNOTATION))},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     0, 13, REP14(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP3(0), 14, REP12(0)},

    {REP16(VALX(KW)),
     REP16(VALX(KW)),
     REP4(VALX(KW)), 0, REP11(VALX(KW)),
     REP10(0), REP6(VALX(KW)),
     VALX(KW), REP15(0),
     REP11(0), REP4(VALX(KW)), 0,
     VALX(KW), REP15(0),
     REP11(0), REP5(VALX(KW))},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP4(0), 16, REP11(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP5(0), 17, REP10(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP14(0), 18, 0,
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP15(0), 12,
     REP16(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP9(0), 20, REP6(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP12(0), 21, REP3(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP5(0), 14, REP10(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP5(0), 30, REP9(0), 23,
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP9(0), 24, REP6(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP4(0), 25, REP11(0),
     REP16(0)},

    {REP16(VALX(BASE_TYPE)),
     REP16(VALX(BASE_TYPE)),
     REP4(VALX(BASE_TYPE)), 0, REP11(VALX(BASE_TYPE)),
     REP10(0), REP6(VALX(BASE_TYPE)),
     VALX(BASE_TYPE), REP15(0),
     REP11(0), REP4(VALX(BASE_TYPE)), 26,
     VALX(BASE_TYPE), REP15(0),
     REP11(0), REP5(VALX(BASE_TYPE))},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP6(0), 27, REP9(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     0, 28, REP14(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP12(0), 29, REP3(0),
     REP16(0)},

    {REP16(VALX(KW_SIMPLE_VAL)),
     REP16(VALX(KW_SIMPLE_VAL)),
     REP4(VALX(KW_SIMPLE_VAL)), 0, REP11(VALX(KW_SIMPLE_VAL)),
     REP10(0), REP6(VALX(KW_SIMPLE_VAL)),
     VALX(KW_SIMPLE_VAL), REP15(0),
     REP11(0), REP4(VALX(KW_SIMPLE_VAL)), 0,
     VALX(KW_SIMPLE_VAL), REP15(0),
     REP11(0), REP5(VALX(KW_SIMPLE_VAL))},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP3(0), 14, REP12(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     0, 63, 0, 62, 0, 0, 61, 0, 60, REP7(0),
     REP16(0),
     REP16(0),
     REP9(0), 58, REP4(0), 32, 0,
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP4(0), 56, REP4(0), 39, REP6(0),
     REP3(0), 36, REP3(0), 33, REP8(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     0, 0, 34, REP13(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     0, 35, REP14(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     14, REP15(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     0, 37, REP14(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP6(0), 38, REP9(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP5(0), 18, REP10(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP15(0), 40,
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP14(0), 41, 0,
     REP16(0)},

    {REP16(VALX(KW)),
     REP16(VALX(KW)),
     VALX(KW), VAL(KW), VALX(KW), VALX(KW), 0, REP11(VALX(KW)),
     REP10(0), REP6(VALX(KW)),
     VALX(KW), REP15(0),
     REP11(0), REP4(VALX(KW)), 42,
     VALX(KW), REP15(0),
     REP11(0), REP5(VALX(KW))},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP4(0), 52, REP11(0),
     REP4(0), 50, 43, REP10(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP14(0), 44, 0,
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP4(0), 45, REP11(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     0, 46, REP14(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP7(0), 47, REP8(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP7(0), 48, REP8(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP5(0), 49, REP10(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP4(0), 14, REP11(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     0, 51, REP14(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP7(0), 14, REP8(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP5(0), 53, REP10(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP12(0), 54, REP3(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP4(0), 55, REP11(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     0, 14, REP14(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP5(0), 57, REP10(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP6(0), 29, REP9(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP14(0), 59, 0,
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP4(0), 60, REP11(0)},

    {REP16(VALX(BASE_TYPE)),
     REP16(VALX(BASE_TYPE)),
     REP4(VALX(BASE_TYPE)), 0, REP11(VALX(BASE_TYPE)),
     REP10(0), REP6(VALX(BASE_TYPE)),
     VALX(BASE_TYPE), REP15(0),
     REP11(0), REP4(VALX(BASE_TYPE)), 0,
     VALX(BASE_TYPE), REP15(0),
     REP11(0), REP5(VALX(BASE_TYPE))},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP4(0), 60, REP11(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     0, 0, 60, REP13(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP6(0), 60, REP9(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     0, 0, 72, REP6(0), 65, REP6(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     66, REP15(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP5(0), 67, REP10(0),
     REP16(0)},

    {REP16(VALX(KW)),
     REP16(VALX(KW)),
     REP4(VALX(KW)), 0, REP11(VALX(KW)),
     REP10(0), REP6(VALX(KW)),
     VALX(KW), REP15(0),
     REP11(0), REP4(VALX(KW)), 70,
     VALX(KW), REP8(0), 68, REP6(0),
     REP11(0), REP5(VALX(KW))},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP4(0), 69, REP11(0),
     REP16(0)},

    {REP16(VALX(BASE_TYPE)),
     REP16(VALX(BASE_TYPE)),
     REP4(VALX(BASE_TYPE)), 0, REP11(VALX(BASE_TYPE)),
     REP10(0), REP6(VALX(BASE_TYPE)),
     VALX(BASE_TYPE), REP15(0),
     REP11(0), REP4(VALX(BASE_TYPE)), 70,
     VALX(BASE_TYPE), REP15(0),
     REP11(0), REP5(VALX(BASE_TYPE))},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP15(0), 71,
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP6(0), 14, REP9(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     0, 35, REP14(0),
     REP5(0), 79, REP3(0), 73, REP6(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP12(0), 76, REP3(0),
     REP3(0), 74, REP12(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP5(0), 75, REP10(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP4(0), 14, REP11(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP5(0), 77, REP10(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP4(0), 78, REP11(0)},

    {REP16(VALX(KW)),
     REP16(VALX(KW)),
     VALX(KW), VAL(KW), VALX(KW), VALX(KW), 0, REP11(VALX(KW)),
     REP10(0), REP6(VALX(KW)),
     VALX(KW), REP15(0),
     REP11(0), REP4(VALX(KW)), 0,
     VALX(KW), REP15(0),
     REP11(0), REP5(VALX(KW))},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP5(0), 29, REP10(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     0, 63, 0, 62, 0, 0, 61, 0, 60, REP7(0),
     REP16(0),
     REP16(0),
     REP5(0), 75, REP3(0), 102, REP6(0),
     100, 96, 97, 0, 81, REP11(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     0, 88, REP14(0),
     0, 0, 82, REP13(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP9(0), 83, REP6(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP14(0), 84, 0,
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP7(0), 85, REP8(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP9(0), 86, REP6(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP6(0), 87, REP9(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP9(0), 14, REP6(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP4(0), 89, REP11(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP9(0), 90, REP6(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP3(0), 91, REP12(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP15(0), 92,
     REP16(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     0, 93, REP14(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP3(0), 94, REP12(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP3(0), 95, REP12(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP5(0), 96, REP10(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     0, 0, 75, REP13(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP3(0), 98, REP12(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP12(0), 99, REP3(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP15(0), 30,
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     0, 101, REP14(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP14(0), 78, 0,
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP14(0), 59, 0,
     REP10(0), 103, REP5(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP5(0), 104, REP10(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP15(0), 70,
     REP16(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     0, 0, VAL(STR), REP13(0),
     REP3(0), 62, 0, 0, 61, REP9(0),
     REP16(0),
     REP16(0),
     REP5(0), 106, REP10(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP3(0), 14, 0, 0, 11, REP9(0),
     REP4(0), 107, REP11(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP5(0), 108, REP10(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     0, 0, 109, REP13(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP14(0), 14, 0,
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP15(0), 118,
     REP4(0), 112, 111, REP10(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     0, 0, 11, REP13(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     0, 0, 113, REP13(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP15(0), 114,
     REP16(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP4(0), 116, REP4(0), 115, REP6(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP14(0), 30, 0,
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP5(0), 30, REP3(0), 117, REP6(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP6(0), 71, REP9(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP12(0), 119, REP3(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP9(0), 11, REP6(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP6(0), 121, REP9(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP6(0), 122, REP9(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP3(0), 123, REP12(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP5(0), 124, REP10(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP4(0), 104, REP11(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     0, 128, REP13(0), 126,
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     0, 0, 127, REP13(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP5(0), 59, REP10(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     0, 0, 129, REP13(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     0, 0, 130, REP13(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP15(0), 131,
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP7(0), 132, REP8(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP15(0), 133,
     REP16(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     0, 134, REP14(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP3(0), 78, REP12(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     0, 142, REP4(0), 140, 0, 0, 138, 0, 0, 76, 0, 0, 136,
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP4(0), 137, REP11(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP5(0), 20, REP10(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP14(0), 139, 0,
     REP16(0)},

    {REP16(VALX(KW)),
     REP16(VALX(KW)),
     REP4(VALX(KW)), 0, REP11(VALX(KW)),
     REP10(0), REP3(VALX(KW)), VAL(COMPOUND_ASSIGN), VALX(KW), VALX(KW),
     VALX(KW), REP15(0),
     REP11(0), REP4(VALX(KW)), 0,
     VALX(KW), REP15(0),
     REP11(0), REP5(VALX(KW))},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP15(0), 141,
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     0, 0, 14, REP13(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP3(0), 148, REP7(0), 143, REP4(0),
     REP8(0), 139, REP7(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP5(0), 144, REP10(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP15(0), 145,
     REP16(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP3(0), 146, REP12(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     147, REP15(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     0, 109, REP14(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     0, 0, 149, REP13(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP15(0), 14,
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP5(0), 151, REP10(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP14(0), 14, 0,
     REP4(0), 78, REP11(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP6(0), 14, REP6(0), 153, 0, 0,
     REP3(0), 14, REP12(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     154, REP15(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP15(0), 96,
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP12(0), 156, REP3(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP15(0), 157,
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     0, 0, 158, REP13(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     0, 159, REP14(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP12(0), 78, REP3(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     0, 167, REP13(0), 141,
     0, 0, 165, 0, 0, 161, REP10(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP14(0), 162, 0,
     REP16(0)},

    {REP16(VALX(KW)),
     REP16(VALX(KW)),
     REP4(VALX(KW)), 0, REP11(VALX(KW)),
     REP10(0), REP6(VALX(KW)),
     VALX(KW), REP15(0),
     REP11(0), REP4(VALX(KW)), 0,
     VALX(KW), REP15(0),
     REP4(0), 163, REP6(0), REP5(VALX(KW))},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP9(0), 164, REP6(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     21, REP15(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP15(0), 166,
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP14(0), 77, 0,
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP12(0), 168, REP3(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP3(0), 79, REP12(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP12(0), 173, 0, 171, 0,
     REP8(0), 170, REP7(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     141, REP15(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP5(0), 172, REP10(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP13(0), 14, 0, 0,
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP3(0), 21, REP12(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP5(0), 175, REP9(0), 14,
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP6(0), 176, REP9(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP5(0), 141, REP10(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     0, 173, REP13(0), 178,
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP14(0), 179, 0,
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP4(0), 14, REP11(0),
     REP4(0), 180, REP11(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP9(0), 181, REP6(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP14(0), 182, 0,
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP5(0), 21, REP10(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP9(0), 191, 0, 0, 189, 0, 0, 187,
     0, 0, 184, REP13(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP5(0), 185, REP10(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     0, 186, REP14(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP11(0), 14, REP4(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP15(0), 188,
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP12(0), 60, REP3(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP15(0), 190,
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP3(0), 186, REP12(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP4(0), 192, REP11(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP7(0), 193, REP8(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP9(0), 194, REP6(0),
     REP16(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP3(0), 38, REP12(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     0, 0, 13, REP13(0),
     REP3(0), 14, 0, 196, REP10(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP4(0), 197, REP11(0)},

    {REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP16(0),
     REP15(0), 198,
     REP16(0)},

    {REP16(VALX(KW)),
     REP16(VALX(KW)),
     REP4(VALX(KW)), 0, REP11(VALX(KW)),
     REP10(0), REP6(VALX(KW)),
     VALX(KW), REP15(0),
     REP11(0), REP4(VALX(KW)), 26,
     VALX(KW), REP15(0),
     REP11(0), REP5(VALX(KW))},

    {REP16(VALX(DEREF_OR_POINTER_OP)),
     REP16(VALX(DEREF_OR_POINTER_OP)),
     VALX(DEREF_OR_POINTER_OP), VAL(DEREF_OR_POINTER_OP), REP14(VALX(DEREF_OR_POINTER_OP)),
     REP16(VALX(DEREF_OR_POINTER_OP)),
     REP16(VALX(DEREF_OR_POINTER_OP)),
     REP16(VALX(DEREF_OR_POINTER_OP)),
     REP16(VALX(DEREF_OR_POINTER_OP)),
     REP16(VALX(DEREF_OR_POINTER_OP))},

    {REP16(VALX(SQUARE_OPEN)),
     REP16(VALX(SQUARE_OPEN)),
     VALX(SQUARE_OPEN), VAL(SQUARE_OPEN), REP14(VALX(SQUARE_OPEN)),
     REP16(VALX(SQUARE_OPEN)),
     REP16(VALX(SQUARE_OPEN)),
     REP16(VALX(SQUARE_OPEN)),
     REP16(VALX(SQUARE_OPEN)),
     REP16(VALX(SQUARE_OPEN))},

    {REP16(VALX(ADDR_OF_OP)),
     REP16(VALX(ADDR_OF_OP)),
     VALX(ADDR_OF_OP), VAL(ADDR_OF_OP), REP14(VALX(ADDR_OF_OP)),
     REP16(VALX(ADDR_OF_OP)),
     REP16(VALX(ADDR_OF_OP)),
     REP16(VALX(ADDR_OF_OP)),
     REP16(VALX(ADDR_OF_OP)),
     REP16(VALX(ADDR_OF_OP))},

    {REP16(VALX(COMPARISON_OP)),
     REP16(VALX(COMPARISON_OP)),
     REP16(VALX(COMPARISON_OP)),
     REP13(VALX(COMPARISON_OP)), VAL(COMPARISON_OP), 203, VALX(COMPARISON_OP),
     REP16(VALX(COMPARISON_OP)),
     REP16(VALX(COMPARISON_OP)),
     REP16(VALX(COMPARISON_OP)),
     REP16(VALX(COMPARISON_OP))},

    {REP16(VALX(SHIFT_OP)),
     REP16(VALX(SHIFT_OP)),
     REP16(VALX(SHIFT_OP)),
     REP13(VALX(SHIFT_OP)), VAL(COMPOUND_ASSIGN), 204, VALX(SHIFT_OP),
     REP16(VALX(SHIFT_OP)),
     REP16(VALX(SHIFT_OP)),
     REP16(VALX(SHIFT_OP)),
     REP16(VALX(SHIFT_OP))},

    {REP16(VALX(SHIFT_OP)),
     REP16(VALX(SHIFT_OP)),
     REP16(VALX(SHIFT_OP)),
     REP13(VALX(SHIFT_OP)), VAL(COMPOUND_ASSIGN), VALX(SHIFT_OP), VALX(SHIFT_OP),
     REP16(VALX(SHIFT_OP)),
     REP16(VALX(SHIFT_OP)),
     REP16(VALX(SHIFT_OP)),
     REP16(VALX(SHIFT_OP))},

    {REP16(VALX(ASSIGN)),
     REP16(VALX(ASSIGN)),
     REP16(VALX(ASSIGN)),
     REP13(VALX(ASSIGN)), VAL(COMPARISON_OP), VALX(ASSIGN), VALX(ASSIGN),
     REP16(VALX(ASSIGN)),
     REP16(VALX(ASSIGN)),
     REP16(VALX(ASSIGN)),
     REP16(VALX(ASSIGN))},

    {REP16(VALX(COMPARISON_OP)),
     REP16(VALX(COMPARISON_OP)),
     REP16(VALX(COMPARISON_OP)),
     REP12(VALX(COMPARISON_OP)), 207, VAL(COMPARISON_OP), VALX(COMPARISON_OP), VALX(COMPARISON_OP),
     REP16(VALX(COMPARISON_OP)),
     REP16(VALX(COMPARISON_OP)),
     REP16(VALX(COMPARISON_OP)),
     REP16(VALX(COMPARISON_OP))},

    {REP16(VALX(SHIFT_OP)),
     REP16(VALX(SHIFT_OP)),
     REP16(VALX(SHIFT_OP)),
     REP12(VALX(SHIFT_OP)), 204, VAL(COMPOUND_ASSIGN), VALX(SHIFT_OP), VALX(SHIFT_OP),
     REP16(VALX(SHIFT_OP)),
     REP16(VALX(SHIFT_OP)),
     REP16(VALX(SHIFT_OP)),
     REP16(VALX(SHIFT_OP))},

    {REP16(VALX(MUL_OP)),
     REP16(VALX(MUL_OP)),
     REP16(VALX(MUL_OP)),
     REP13(VALX(MUL_OP)), VAL(COMPOUND_ASSIGN), VALX(MUL_OP), VALX(MUL_OP),
     REP16(VALX(MUL_OP)),
     REP16(VALX(MUL_OP)),
     REP16(VALX(MUL_OP)),
     REP16(VALX(MUL_OP))},

    {REP16(VALX(ADD_OP)),
     REP16(VALX(ADD_OP)),
     REP14(VALX(ADD_OP)), 0, VALX(ADD_OP),
     REP10(0), REP3(VALX(ADD_OP)), VAL(COMPOUND_ASSIGN), VALX(ADD_OP), VALX(ADD_OP),
     REP16(VALX(ADD_OP)),
     REP16(VALX(ADD_OP)),
     REP16(VALX(ADD_OP)),
     REP16(VALX(ADD_OP))},

    {REP16(VALX(MUL_OP)),
     REP16(VALX(MUL_OP)),
     REP6(VALX(MUL_OP)), VAL(AND_SC_OP), REP9(VALX(MUL_OP)),
     REP13(VALX(MUL_OP)), VAL(COMPOUND_ASSIGN), VALX(MUL_OP), VALX(MUL_OP),
     REP16(VALX(MUL_OP)),
     REP16(VALX(MUL_OP)),
     REP16(VALX(MUL_OP)),
     REP16(VALX(MUL_OP))},

    {REP16(VALX(PREFIX_OP)),
     REP16(VALX(PREFIX_OP)),
     REP16(VALX(PREFIX_OP)),
     REP13(VALX(PREFIX_OP)), VAL(COMPARISON_OP), VALX(PREFIX_OP), VALX(PREFIX_OP),
     REP16(VALX(PREFIX_OP)),
     REP16(VALX(PREFIX_OP)),
     REP16(VALX(PREFIX_OP)),
     REP16(VALX(PREFIX_OP))},

};

const char* const TK_KIND_ToStringMap[] = {
    "INVALID", // 0
    "COMPARISON_OP", // 1
    "SHIFT_OP", // 2
    "ADD_OP", // 3
    "MUL_OP", // 4
    "OR_SC_OP", // 5
    "AND_SC_OP", // 6
    "DEREF_OR_POINTER_OP", // 7
    "ADDR_OF_OP", // 8
    "PREFIX_OP", // 9
    "BASE_TYPE", // 10
    "KW", // 11
    "KW_SIMPLE_VAL", // 12
    "ANNOTATION", // 13
    "ASSIGN", // 14
    "SQUARE_OPEN", // 15
    "CURLY_OPEN", // 16
    "GENERIC_ANNOTATION", // 17
    "TERNARY_OP", // 18
    "DOT_OP", // 19
    "COMPOUND_ASSIGN", // 20
    "COLON", // 21
    "COMMA", // 22
    "PAREN_OPEN", // 23
    "PAREN_CLOSED", // 24
    "CURLY_CLOSED", // 25
    "SQUARE_CLOSED", // 26
    "COMMENT", // 27
    "CHAR", // 28
    "STR", // 29
    "NUM", // 30
    "ID", // 31
    "SPECIAL_EOF", // 32
};
const char* EnumToString(TK_KIND x) { return TK_KIND_ToStringMap[unsigned(x)]; }

BINARY_EXPR_KIND BINARY_EXPR_KIND_PerfectHash[64] = {
  BINARY_EXPR_KIND::INVALID,
  BINARY_EXPR_KIND::LT,
  BINARY_EXPR_KIND::LE,
  BINARY_EXPR_KIND::INVALID,
  BINARY_EXPR_KIND::EQ,
  BINARY_EXPR_KIND::GT,
  BINARY_EXPR_KIND::GE,
  BINARY_EXPR_KIND::INVALID,
  BINARY_EXPR_KIND::INVALID,
  BINARY_EXPR_KIND::INVALID,
  BINARY_EXPR_KIND::SHL,
  BINARY_EXPR_KIND::ROTL,
  BINARY_EXPR_KIND::NE,
  BINARY_EXPR_KIND::INVALID,
  BINARY_EXPR_KIND::SHR,
  BINARY_EXPR_KIND::ROTR,
  BINARY_EXPR_KIND::INVALID,
  BINARY_EXPR_KIND::OR,
  BINARY_EXPR_KIND::INVALID,
  BINARY_EXPR_KIND::INVALID,
  BINARY_EXPR_KIND::INVALID,
  BINARY_EXPR_KIND::XOR,
  BINARY_EXPR_KIND::INVALID,
  BINARY_EXPR_KIND::INVALID,
  BINARY_EXPR_KIND::INVALID,
  BINARY_EXPR_KIND::INVALID,
  BINARY_EXPR_KIND::INVALID,
  BINARY_EXPR_KIND::INVALID,
  BINARY_EXPR_KIND::INVALID,
  BINARY_EXPR_KIND::INVALID,
  BINARY_EXPR_KIND::INVALID,
  BINARY_EXPR_KIND::INVALID,
  BINARY_EXPR_KIND::INVALID,
  BINARY_EXPR_KIND::INVALID,
  BINARY_EXPR_KIND::ORSC,
  BINARY_EXPR_KIND::INVALID,
  BINARY_EXPR_KIND::INVALID,
  BINARY_EXPR_KIND::INVALID,
  BINARY_EXPR_KIND::INVALID,
  BINARY_EXPR_KIND::INVALID,
  BINARY_EXPR_KIND::INVALID,
  BINARY_EXPR_KIND::INVALID,
  BINARY_EXPR_KIND::INVALID,
  BINARY_EXPR_KIND::MOD,
  BINARY_EXPR_KIND::INVALID,
  BINARY_EXPR_KIND::AND,
  BINARY_EXPR_KIND::INVALID,
  BINARY_EXPR_KIND::ADD,
  BINARY_EXPR_KIND::INVALID,
  BINARY_EXPR_KIND::INVALID,
  BINARY_EXPR_KIND::INVALID,
  BINARY_EXPR_KIND::SUB,
  BINARY_EXPR_KIND::INVALID,
  BINARY_EXPR_KIND::MUL,
  BINARY_EXPR_KIND::INVALID,
  BINARY_EXPR_KIND::INVALID,
  BINARY_EXPR_KIND::INVALID,
  BINARY_EXPR_KIND::INVALID,
  BINARY_EXPR_KIND::INVALID,
  BINARY_EXPR_KIND::INVALID,
  BINARY_EXPR_KIND::INVALID,
  BINARY_EXPR_KIND::INVALID,
  BINARY_EXPR_KIND::ANDSC,
  BINARY_EXPR_KIND::DIV,
};

const std::map<std::string_view, NT> KeywordToNodeTypeMap = {
{"union", NT::TypeUnion},
{"mfor", NT::MacroFor},
{"trap", NT::StmtTrap},
{"if", NT::StmtIf},
{"make_span", NT::ValSpan},
{"stringify", NT::ExprStringify},
{"widen_as", NT::ExprWiden},
{"at", NT::ExprIndex},
{"unwrap", NT::ExprUnwrap},
{"break", NT::StmtBreak},
{"srcloc", NT::ExprSrcLoc},
{"union_untagged", NT::ExprUnionUntagged},
{"enum", NT::DefEnum},
{"fun", NT::DefFun},
{"false", NT::ValFalse},
{"auto", NT::TypeAuto},
{"rec", NT::DefRec},
{"module", NT::DefMod},
{"return", NT::StmtReturn},
{"expr", NT::ExprStmt},
{"union_delta", NT::TypeUnionDelta},
{"vec", NT::TypeVec},
{"import", NT::Import},
{"undef", NT::ValUndef},
{"unsafe_as", NT::ExprUnsafeCast},
{"len", NT::ExprLen},
{"bitwise_as", NT::ExprBitCast},
{"continue", NT::StmtContinue},
{"macro", NT::DefMacro},
{"offset_of", NT::ExprOffsetof},
{"type", NT::DefType},
{"size_of", NT::ExprSizeof},
{"is", NT::ExprIs},
{"typeid_of", NT::ExprTypeId},
{"type_of", NT::TypeOf},
{"as", NT::ExprAs},
{"do", NT::StmtExpr},
{"block", NT::StmtBlock},
{"void_val", NT::ValVoid},
{"let", NT::DefVar},
{"case", NT::Case},
{"span", NT::TypeSpan},
{"front", NT::ExprFront},
{"true", NT::ValTrue},
{"auto_val", NT::ValAuto},
{"static_assert", NT::StmtStaticAssert},
{"wrap_as", NT::ExprWrap},
{"defer", NT::StmtDefer},
{"union_tag", NT::ExprUnionTag},
{"funtype", NT::TypeFun},
{"global", NT::DefGlobal},
{"mlet", NT::MacroVar},
{"narrow_as", NT::ExprNarrow},
{"cond", NT::StmtCond},
};
/* @AUTOGEN-END@ */
// clang-format on



NT KeywordToNT(std::string_view kw) {
  auto it  = KeywordToNodeTypeMap.find(kw);
  if (it == KeywordToNodeTypeMap.end()) return NT::invalid;
  return it->second;
}

BINARY_EXPR_KIND BINARY_EXPR_KIND_FromString(std::string_view s, TK_KIND kind) {
  uint8_t o = s[0];
  uint8_t l = s.size();
  uint8_t index = (o << 1) + l + (uint8_t(kind) << 3);
  return BINARY_EXPR_KIND_PerfectHash[index & 0x3f];
}

Result FindInTrie(std::string_view needle) {
  uint32_t node_no = 0;
  for (uint32_t i = 0; i < uint32_t(needle.size()); ++i) {
    uint8_t c = uint8_t(needle[i]);
    if (c > 127) {
      c = 127;
    }

    uint16_t x = KeywordAndOpRecognizer[node_no][c];

    // std::cout << "Find [" << i << "] [" << c << "] -> " << int(x) << "\n";

    if (x == 0) {
      return Result();
    } else if (x < TrieNodeCount) {
      node_no = x;
    } else {
      x -= TrieNodeCount;
      if (x > uint16_t(TK_KIND::SPECIAL_EOF)) {
        x -= uint16_t(TK_KIND::SPECIAL_EOF) + 1;
        return Result{TK_KIND(x), i};
      } else {
        return Result{TK_KIND(x), i + 1};
      }
    }
  }
  return Result();
}
}  // namespace cwerg::fe
#pragma once
// NOTE: this file is PARTIALLY autogenerated via: ./isel_tab.py gen_h
// (c) Robert Muth - see LICENSE for more info

#include <cstdint>

#include "BE/Base/ir.h"
#include "BE/Base/opcode_gen.h"
#include "BE/CodeGenX64/regs.h"
#include "BE/CpuX64/opcode_gen.h"

namespace cwerg::code_gen_x64 {

/* @AUTOGEN-START@ */

enum class C : uint8_t {
    INVALID = 0,
    ZERO = 1,
    ANY = 2,
    REG = 3,
    SP_REG = 4,
    SIMM8 = 5,
    SIMM16 = 6,
    SIMM32 = 7,
    SIMM64 = 8,
    UIMM8 = 9,
    UIMM16 = 10,
    UIMM32 = 11,
    UIMM64 = 12,
    REG_RAX = 13,
    REG_RCX = 14,
    REG_RDX = 15,
};

enum class P : uint8_t {
    invalid = 0,
    reg01 = 1,
    reg0 = 2,
    reg1 = 3,
    reg2 = 4,
    reg3 = 5,
    reg4 = 6,
    tmp_gpr = 7,
    tmp_flt = 8,
    scratch_gpr = 9,
    num0 = 10,
    num1 = 11,
    num2 = 12,
    num3 = 13,
    num4 = 14,
    spill01 = 15,
    spill0 = 16,
    spill1 = 17,
    spill2 = 18,
    stk1_offset2 = 19,
    stk0_offset1 = 20,
    stk1 = 21,
    bbl0 = 22,
    bbl1 = 23,
    bbl2 = 24,
    fun0 = 25,
    mem0_num1_prel = 26,
    mem1_num2_prel = 27,
    fun1_prel = 28,
    jtb1_prel = 29,
    frame_size = 30,
};
/* @AUTOGEN-END@ */

struct InsTmpl {
  // signed because some operands need that (e.g. offsets)
  // the values need to be processed with EncodeOperand
  int64_t operands[x64::MAX_OPERAND_COUNT];
  x64::OPC opcode;
  // bit i set: operands[i] is of enum type Param
  // bit i clr: operands[i] contains a number
  uint16_t template_mask;
};

static_assert(x64::MAX_OPERAND_COUNT <= 8);

struct Pattern {
  union {
    base::DK type_curbs[8];  // 8 >= MAX_OPERANDS
    uint64_t type_curbs_as_int;
  };
  C op_curbs[8];  // 8 >= MAX_OPERANDS
  const InsTmpl* start;
  uint8_t length;
};

extern const Pattern* FindMatchingPattern(base::Ins ins);


static_assert(x64::MAX_OPERAND_COUNT == 6);

extern x64::Ins MakeIns(x64::OPC opc_enum,
                        int64_t x0 = 0,
                        int64_t x1 = 0,
                        int64_t x2 = 0,
                        int64_t x3 = 0,
                        int64_t x4 = 0,
                        int64_t x5 = 0);

extern x64::Ins MakeInsFromTmpl(const InsTmpl& tmpl,
                                base::Ins ins,
                                const EmitContext& ctx);

extern void EmitFunProlog(const EmitContext& ctx,
                          std::vector<x64::Ins>* output);
extern void EmitFunEpilog(const EmitContext& ctx,
                          std::vector<x64::Ins>* output);

extern void FunAddNop1ForCodeSel(base::Fun fun, std::vector<base::Ins>* inss);

extern const char* EnumToString(C f);
extern const char* EnumToString(P f);

}  // namespace cwerg::code_gen_x64

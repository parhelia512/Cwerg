// NOTE: this file is PARTIALLY autogenerated via: ./opcode_tab.py gen_c
#include "BE/CpuA32/opcode_gen.h"
#include "Util/assert.h"

namespace cwerg::a32 {



uint32_t DecodeFloatZero(uint32_t data) {
  ASSERT(data == 0, "");
  return 0;
}

uint32_t EncodeFloatZero(uint32_t num) {
  if (num == 0) return 0;
  return kEncodeFailure;
}

/* @AUTOGEN-START@ */
// Indexed by OPC which in turn are organize to help with disassembly
const Opcode OpcodeTable[] = {
{"invalid", "invalid", 0, 0, 0, {}, 0, MEM_WIDTH::NA, SR_UPDATE::NONE},
{"adc", "adc_imm", 0x0ff00000, 0x02a00000,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::IMM_0_7_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"adc", "adc_regimm", 0x0ff00010, 0x00a00000,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::IMM_7_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"adc", "adc_regreg", 0x0ff00090, 0x00a00010,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::REG_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"adcs", "adcs_imm", 0x0ff00000, 0x02b00000,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::IMM_0_7_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"adcs", "adcs_regimm", 0x0ff00010, 0x00b00000,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::IMM_7_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"adcs", "adcs_regreg", 0x0ff00090, 0x00b00010,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::REG_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"add", "add_imm", 0x0ff00000, 0x02800000,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::IMM_0_7_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"add", "add_regimm", 0x0ff00010, 0x00800000,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::IMM_7_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"add", "add_regreg", 0x0ff00090, 0x00800010,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::REG_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"adds", "adds_imm", 0x0ff00000, 0x02900000,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::IMM_0_7_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"adds", "adds_regimm", 0x0ff00010, 0x00900000,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::IMM_7_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"adds", "adds_regreg", 0x0ff00090, 0x00900010,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::REG_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"and", "and_imm", 0x0ff00000, 0x02000000,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::IMM_0_7_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"and", "and_regimm", 0x0ff00010, 0x00000000,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::IMM_7_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"and", "and_regreg", 0x0ff00090, 0x00000010,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::REG_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"ands", "ands_imm", 0x0ff00000, 0x02100000,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::IMM_0_7_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"ands", "ands_regimm", 0x0ff00010, 0x00100000,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::IMM_7_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"ands", "ands_regreg", 0x0ff00090, 0x00100010,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::REG_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"b", "b", 0x0f000000, 0x0a000000,
 2, {OK::PRED_28_31, OK::SIMM_0_23},
 JUMP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"bic", "bic_imm", 0x0ff00000, 0x03c00000,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::IMM_0_7_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"bic", "bic_regimm", 0x0ff00010, 0x01c00000,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::IMM_7_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"bic", "bic_regreg", 0x0ff00090, 0x01c00010,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::REG_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"bics", "bics_imm", 0x0ff00000, 0x03d00000,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::IMM_0_7_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"bics", "bics_regimm", 0x0ff00010, 0x01d00000,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::IMM_7_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"bics", "bics_regreg", 0x0ff00090, 0x01d00010,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::REG_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"bl", "bl", 0x0f000000, 0x0b000000,
 2, {OK::PRED_28_31, OK::SIMM_0_23},
 JUMP | LINK, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"blx", "blx_reg", 0x0ffffff0, 0x012fff30,
 2, {OK::PRED_28_31, OK::REG_0_3},
 JUMP | LINK | THUMB, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"bx", "bx", 0x0ffffff0, 0x012fff10,
 2, {OK::PRED_28_31, OK::REG_0_3},
 JUMP | THUMB, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"clz", "clz", 0x0fff0ff0, 0x016f0f10,
 3, {OK::PRED_28_31, OK::REG_12_15, OK::REG_0_3},
 ALU1, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"cmn", "cmn_imm", 0x0ff0f000, 0x03700000,
 3, {OK::PRED_28_31, OK::REG_16_19, OK::IMM_0_7_8_11},
 TEST, MEM_WIDTH::NA, SR_UPDATE::NCZ
},
{"cmn", "cmn_regimm", 0x0ff0f010, 0x01700000,
 5, {OK::PRED_28_31, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::IMM_7_11},
 TEST, MEM_WIDTH::NA, SR_UPDATE::NCZ
},
{"cmn", "cmn_regreg", 0x0ff0f090, 0x01700010,
 5, {OK::PRED_28_31, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::REG_8_11},
 TEST, MEM_WIDTH::NA, SR_UPDATE::NCZ
},
{"cmp", "cmp_imm", 0x0ff0f000, 0x03500000,
 3, {OK::PRED_28_31, OK::REG_16_19, OK::IMM_0_7_8_11},
 TEST, MEM_WIDTH::NA, SR_UPDATE::NCZ
},
{"cmp", "cmp_regimm", 0x0ff0f010, 0x01500000,
 5, {OK::PRED_28_31, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::IMM_7_11},
 TEST, MEM_WIDTH::NA, SR_UPDATE::NCZ
},
{"cmp", "cmp_regreg", 0x0ff0f090, 0x01500010,
 5, {OK::PRED_28_31, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::REG_8_11},
 TEST, MEM_WIDTH::NA, SR_UPDATE::NCZ
},
{"eor", "eor_imm", 0x0ff00000, 0x02200000,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::IMM_0_7_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"eor", "eor_regimm", 0x0ff00010, 0x00200000,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::IMM_7_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"eor", "eor_regreg", 0x0ff00090, 0x00200010,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::REG_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"eors", "eors_imm", 0x0ff00000, 0x02300000,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::IMM_0_7_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"eors", "eors_regimm", 0x0ff00010, 0x00300000,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::IMM_7_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"eors", "eors_regreg", 0x0ff00090, 0x00300010,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::REG_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"ldmda", "ldmda", 0x0ff00000, 0x08100000,
 3, {OK::PRED_28_31, OK::REGLIST_0_15, OK::REG_16_19},
 LOAD | MULTIPLE | ADDR_POST | ADDR_DEC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"ldmda", "ldmda_update", 0x0ff00000, 0x08300000,
 3, {OK::PRED_28_31, OK::REGLIST_0_15, OK::REG_16_19},
 LOAD | MULTIPLE | ADDR_POST | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"ldmdb", "ldmdb", 0x0ff00000, 0x09100000,
 3, {OK::PRED_28_31, OK::REGLIST_0_15, OK::REG_16_19},
 LOAD | MULTIPLE | ADDR_PRE | ADDR_DEC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"ldmdb", "ldmdb_update", 0x0ff00000, 0x09300000,
 3, {OK::PRED_28_31, OK::REGLIST_0_15, OK::REG_16_19},
 LOAD | MULTIPLE | ADDR_PRE | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"ldmia", "ldmia", 0x0ff00000, 0x08900000,
 3, {OK::PRED_28_31, OK::REGLIST_0_15, OK::REG_16_19},
 LOAD | MULTIPLE | ADDR_POST | ADDR_INC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"ldmia", "ldmia_update", 0x0ff00000, 0x08b00000,
 3, {OK::PRED_28_31, OK::REGLIST_0_15, OK::REG_16_19},
 LOAD | MULTIPLE | ADDR_POST | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"ldmib", "ldmib", 0x0ff00000, 0x09900000,
 3, {OK::PRED_28_31, OK::REGLIST_0_15, OK::REG_16_19},
 LOAD | MULTIPLE | ADDR_PRE | ADDR_INC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"ldmib", "ldmib_update", 0x0ff00000, 0x09b00000,
 3, {OK::PRED_28_31, OK::REGLIST_0_15, OK::REG_16_19},
 LOAD | MULTIPLE | ADDR_PRE | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"ldp", "ldp_imm_add", 0xfff0f000, 0xf5d0f000,
 2, {OK::REG_16_19, OK::IMM_0_11},
 PREFETCH | ADDR_PRE | ADDR_INC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"ldp", "ldp_imm_add_post", 0xfff0f000, 0xf4d0f000,
 2, {OK::REG_16_19, OK::IMM_0_11},
 PREFETCH | ADDR_POST | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"ldp", "ldp_imm_add_pre", 0xfff0f000, 0xf5f0f000,
 2, {OK::REG_16_19, OK::IMM_0_11},
 PREFETCH | ADDR_PRE | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"ldp", "ldp_imm_sub", 0xfff0f000, 0xf550f000,
 2, {OK::REG_16_19, OK::IMM_0_11},
 PREFETCH | ADDR_PRE | ADDR_DEC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"ldp", "ldp_imm_sub_post", 0xfff0f000, 0xf450f000,
 2, {OK::REG_16_19, OK::IMM_0_11},
 PREFETCH | ADDR_POST | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"ldp", "ldp_imm_sub_pre", 0xfff0f000, 0xf570f000,
 2, {OK::REG_16_19, OK::IMM_0_11},
 PREFETCH | ADDR_PRE | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"ldp", "ldp_reg_add", 0xfff0f010, 0xf7d0f000,
 4, {OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::IMM_7_11},
 PREFETCH | ADDR_PRE | ADDR_INC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"ldp", "ldp_reg_add_post", 0xfff0f010, 0xf6d0f000,
 4, {OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::IMM_7_11},
 PREFETCH | ADDR_POST | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"ldp", "ldp_reg_add_pre", 0xfff0f010, 0xf7f0f000,
 4, {OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::IMM_7_11},
 PREFETCH | ADDR_PRE | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"ldp", "ldp_reg_sub", 0xfff0f010, 0xf750f000,
 4, {OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::IMM_7_11},
 PREFETCH | ADDR_PRE | ADDR_DEC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"ldp", "ldp_reg_sub_post", 0xfff0f010, 0xf650f000,
 4, {OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::IMM_7_11},
 PREFETCH | ADDR_POST | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"ldp", "ldp_reg_sub_pre", 0xfff0f010, 0xf770f000,
 4, {OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::IMM_7_11},
 PREFETCH | ADDR_PRE | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"ldr", "ldr_imm_add", 0x0ff00000, 0x05900000,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::IMM_0_11},
 LOAD | ADDR_PRE | ADDR_INC, MEM_WIDTH::W4, SR_UPDATE::NONE
},
{"ldr", "ldr_imm_add_post", 0x0ff00000, 0x04900000,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::IMM_0_11},
 LOAD | ADDR_POST | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W4, SR_UPDATE::NONE
},
{"ldr", "ldr_imm_add_pre", 0x0ff00000, 0x05b00000,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::IMM_0_11},
 LOAD | ADDR_PRE | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W4, SR_UPDATE::NONE
},
{"ldr", "ldr_imm_sub", 0x0ff00000, 0x05100000,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::IMM_0_11},
 LOAD | ADDR_PRE | ADDR_DEC, MEM_WIDTH::W4, SR_UPDATE::NONE
},
{"ldr", "ldr_imm_sub_post", 0x0ff00000, 0x04100000,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::IMM_0_11},
 LOAD | ADDR_POST | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W4, SR_UPDATE::NONE
},
{"ldr", "ldr_imm_sub_pre", 0x0ff00000, 0x05300000,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::IMM_0_11},
 LOAD | ADDR_PRE | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W4, SR_UPDATE::NONE
},
{"ldr", "ldr_reg_add", 0x0ff00010, 0x07900000,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::IMM_7_11},
 LOAD | ADDR_PRE | ADDR_INC, MEM_WIDTH::W4, SR_UPDATE::NONE
},
{"ldr", "ldr_reg_add_post", 0x0ff00010, 0x06900000,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::IMM_7_11},
 LOAD | ADDR_POST | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W4, SR_UPDATE::NONE
},
{"ldr", "ldr_reg_add_pre", 0x0ff00010, 0x07b00000,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::IMM_7_11},
 LOAD | ADDR_PRE | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W4, SR_UPDATE::NONE
},
{"ldr", "ldr_reg_sub", 0x0ff00010, 0x07100000,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::IMM_7_11},
 LOAD | ADDR_PRE | ADDR_DEC, MEM_WIDTH::W4, SR_UPDATE::NONE
},
{"ldr", "ldr_reg_sub_post", 0x0ff00010, 0x06100000,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::IMM_7_11},
 LOAD | ADDR_POST | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W4, SR_UPDATE::NONE
},
{"ldr", "ldr_reg_sub_pre", 0x0ff00010, 0x07300000,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::IMM_7_11},
 LOAD | ADDR_PRE | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W4, SR_UPDATE::NONE
},
{"ldrb", "ldrb_imm_add", 0x0ff00000, 0x05d00000,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::IMM_0_11},
 LOAD | ADDR_PRE | ADDR_INC, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"ldrb", "ldrb_imm_add_post", 0x0ff00000, 0x04d00000,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::IMM_0_11},
 LOAD | ADDR_POST | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"ldrb", "ldrb_imm_add_pre", 0x0ff00000, 0x05f00000,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::IMM_0_11},
 LOAD | ADDR_PRE | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"ldrb", "ldrb_imm_sub", 0x0ff00000, 0x05500000,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::IMM_0_11},
 LOAD | ADDR_PRE | ADDR_DEC, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"ldrb", "ldrb_imm_sub_post", 0x0ff00000, 0x04500000,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::IMM_0_11},
 LOAD | ADDR_POST | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"ldrb", "ldrb_imm_sub_pre", 0x0ff00000, 0x05700000,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::IMM_0_11},
 LOAD | ADDR_PRE | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"ldrb", "ldrb_reg_add", 0x0ff00010, 0x07d00000,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::IMM_7_11},
 LOAD | ADDR_PRE | ADDR_INC, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"ldrb", "ldrb_reg_add_post", 0x0ff00010, 0x06d00000,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::IMM_7_11},
 LOAD | ADDR_POST | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"ldrb", "ldrb_reg_add_pre", 0x0ff00010, 0x07f00000,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::IMM_7_11},
 LOAD | ADDR_PRE | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"ldrb", "ldrb_reg_sub", 0x0ff00010, 0x07500000,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::IMM_7_11},
 LOAD | ADDR_PRE | ADDR_DEC, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"ldrb", "ldrb_reg_sub_post", 0x0ff00010, 0x06500000,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::IMM_7_11},
 LOAD | ADDR_POST | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"ldrb", "ldrb_reg_sub_pre", 0x0ff00010, 0x07700000,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::IMM_7_11},
 LOAD | ADDR_PRE | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"ldrd", "ldrd_imm_add", 0x0ff000f0, 0x01c000d0,
 4, {OK::PRED_28_31, OK::REG_PAIR_12_15, OK::REG_16_19, OK::IMM_0_3_8_11},
 LOAD | ADDR_PRE | ADDR_INC, MEM_WIDTH::W8, SR_UPDATE::NONE
},
{"ldrd", "ldrd_imm_add_post", 0x0ff000f0, 0x00c000d0,
 4, {OK::PRED_28_31, OK::REG_PAIR_12_15, OK::REG_16_19, OK::IMM_0_3_8_11},
 LOAD | ADDR_POST | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W8, SR_UPDATE::NONE
},
{"ldrd", "ldrd_imm_add_pre", 0x0ff000f0, 0x01e000d0,
 4, {OK::PRED_28_31, OK::REG_PAIR_12_15, OK::REG_16_19, OK::IMM_0_3_8_11},
 LOAD | ADDR_PRE | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W8, SR_UPDATE::NONE
},
{"ldrd", "ldrd_imm_sub", 0x0ff000f0, 0x014000d0,
 4, {OK::PRED_28_31, OK::REG_PAIR_12_15, OK::REG_16_19, OK::IMM_0_3_8_11},
 LOAD | ADDR_PRE | ADDR_DEC, MEM_WIDTH::W8, SR_UPDATE::NONE
},
{"ldrd", "ldrd_imm_sub_post", 0x0ff000f0, 0x004000d0,
 4, {OK::PRED_28_31, OK::REG_PAIR_12_15, OK::REG_16_19, OK::IMM_0_3_8_11},
 LOAD | ADDR_POST | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W8, SR_UPDATE::NONE
},
{"ldrd", "ldrd_imm_sub_pre", 0x0ff000f0, 0x016000d0,
 4, {OK::PRED_28_31, OK::REG_PAIR_12_15, OK::REG_16_19, OK::IMM_0_3_8_11},
 LOAD | ADDR_PRE | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W8, SR_UPDATE::NONE
},
{"ldrd", "ldrd_reg_add", 0x0ff00ff0, 0x018000d0,
 4, {OK::PRED_28_31, OK::REG_PAIR_12_15, OK::REG_16_19, OK::REG_0_3},
 LOAD | ADDR_PRE | ADDR_INC, MEM_WIDTH::W8, SR_UPDATE::NONE
},
{"ldrd", "ldrd_reg_add_post", 0x0ff00ff0, 0x008000d0,
 4, {OK::PRED_28_31, OK::REG_PAIR_12_15, OK::REG_16_19, OK::REG_0_3},
 LOAD | ADDR_POST | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W8, SR_UPDATE::NONE
},
{"ldrd", "ldrd_reg_add_pre", 0x0ff00ff0, 0x01a000d0,
 4, {OK::PRED_28_31, OK::REG_PAIR_12_15, OK::REG_16_19, OK::REG_0_3},
 LOAD | ADDR_PRE | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W8, SR_UPDATE::NONE
},
{"ldrd", "ldrd_reg_sub", 0x0ff00ff0, 0x010000d0,
 4, {OK::PRED_28_31, OK::REG_PAIR_12_15, OK::REG_16_19, OK::REG_0_3},
 LOAD | ADDR_PRE | ADDR_DEC, MEM_WIDTH::W8, SR_UPDATE::NONE
},
{"ldrd", "ldrd_reg_sub_post", 0x0ff00ff0, 0x000000d0,
 4, {OK::PRED_28_31, OK::REG_PAIR_12_15, OK::REG_16_19, OK::REG_0_3},
 LOAD | ADDR_POST | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W8, SR_UPDATE::NONE
},
{"ldrd", "ldrd_reg_sub_pre", 0x0ff00ff0, 0x012000d0,
 4, {OK::PRED_28_31, OK::REG_PAIR_12_15, OK::REG_16_19, OK::REG_0_3},
 LOAD | ADDR_PRE | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W8, SR_UPDATE::NONE
},
{"ldrex", "ldrex", 0x0ff00fff, 0x01900f9f,
 3, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19},
 LOAD | ATOMIC, MEM_WIDTH::W4, SR_UPDATE::NONE
},
{"ldrexb", "ldrexb", 0x0ff00fff, 0x01d00f9f,
 3, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19},
 LOAD | ATOMIC, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"ldrexh", "ldrexh", 0x0ff00fff, 0x01f00f9f,
 3, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19},
 LOAD | ATOMIC, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"ldrh", "ldrh_imm_add", 0x0ff000f0, 0x01d000b0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::IMM_0_3_8_11},
 LOAD | ADDR_PRE | ADDR_INC, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"ldrh", "ldrh_imm_add_post", 0x0ff000f0, 0x00d000b0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::IMM_0_3_8_11},
 LOAD | ADDR_POST | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"ldrh", "ldrh_imm_add_pre", 0x0ff000f0, 0x01f000b0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::IMM_0_3_8_11},
 LOAD | ADDR_PRE | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"ldrh", "ldrh_imm_sub", 0x0ff000f0, 0x015000b0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::IMM_0_3_8_11},
 LOAD | ADDR_PRE | ADDR_DEC, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"ldrh", "ldrh_imm_sub_post", 0x0ff000f0, 0x005000b0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::IMM_0_3_8_11},
 LOAD | ADDR_POST | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"ldrh", "ldrh_imm_sub_pre", 0x0ff000f0, 0x017000b0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::IMM_0_3_8_11},
 LOAD | ADDR_PRE | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"ldrh", "ldrh_reg_add", 0x0ff00ff0, 0x019000b0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3},
 LOAD | ADDR_PRE | ADDR_INC, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"ldrh", "ldrh_reg_add_post", 0x0ff00ff0, 0x009000b0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3},
 LOAD | ADDR_POST | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"ldrh", "ldrh_reg_add_pre", 0x0ff00ff0, 0x01b000b0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3},
 LOAD | ADDR_PRE | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"ldrh", "ldrh_reg_sub", 0x0ff00ff0, 0x011000b0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3},
 LOAD | ADDR_PRE | ADDR_DEC, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"ldrh", "ldrh_reg_sub_post", 0x0ff00ff0, 0x001000b0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3},
 LOAD | ADDR_POST | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"ldrh", "ldrh_reg_sub_pre", 0x0ff00ff0, 0x013000b0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3},
 LOAD | ADDR_PRE | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"ldrsb", "ldrsb_imm_add", 0x0ff000f0, 0x01d000d0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::IMM_0_3_8_11},
 LOAD | ADDR_PRE | ADDR_INC, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"ldrsb", "ldrsb_imm_add_post", 0x0ff000f0, 0x00d000d0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::IMM_0_3_8_11},
 LOAD | ADDR_POST | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"ldrsb", "ldrsb_imm_add_pre", 0x0ff000f0, 0x01f000d0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::IMM_0_3_8_11},
 LOAD | ADDR_PRE | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"ldrsb", "ldrsb_imm_sub", 0x0ff000f0, 0x015000d0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::IMM_0_3_8_11},
 LOAD | ADDR_PRE | ADDR_DEC, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"ldrsb", "ldrsb_imm_sub_post", 0x0ff000f0, 0x005000d0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::IMM_0_3_8_11},
 LOAD | ADDR_POST | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"ldrsb", "ldrsb_imm_sub_pre", 0x0ff000f0, 0x017000d0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::IMM_0_3_8_11},
 LOAD | ADDR_PRE | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"ldrsb", "ldrsb_reg_add", 0x0ff00ff0, 0x019000d0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3},
 LOAD | ADDR_PRE | ADDR_INC, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"ldrsb", "ldrsb_reg_add_post", 0x0ff00ff0, 0x009000d0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3},
 LOAD | ADDR_POST | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"ldrsb", "ldrsb_reg_add_pre", 0x0ff00ff0, 0x01b000d0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3},
 LOAD | ADDR_PRE | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"ldrsb", "ldrsb_reg_sub", 0x0ff00ff0, 0x011000d0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3},
 LOAD | ADDR_PRE | ADDR_DEC, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"ldrsb", "ldrsb_reg_sub_post", 0x0ff00ff0, 0x001000d0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3},
 LOAD | ADDR_POST | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"ldrsb", "ldrsb_reg_sub_pre", 0x0ff00ff0, 0x013000d0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3},
 LOAD | ADDR_PRE | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"ldrsh", "ldrsh_imm_add", 0x0ff000f0, 0x01d000f0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::IMM_0_3_8_11},
 LOAD | ADDR_PRE | ADDR_INC, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"ldrsh", "ldrsh_imm_add_post", 0x0ff000f0, 0x00d000f0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::IMM_0_3_8_11},
 LOAD | ADDR_POST | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"ldrsh", "ldrsh_imm_add_pre", 0x0ff000f0, 0x01f000f0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::IMM_0_3_8_11},
 LOAD | ADDR_PRE | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"ldrsh", "ldrsh_imm_sub", 0x0ff000f0, 0x015000f0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::IMM_0_3_8_11},
 LOAD | ADDR_PRE | ADDR_DEC, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"ldrsh", "ldrsh_imm_sub_post", 0x0ff000f0, 0x005000f0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::IMM_0_3_8_11},
 LOAD | ADDR_POST | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"ldrsh", "ldrsh_imm_sub_pre", 0x0ff000f0, 0x017000f0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::IMM_0_3_8_11},
 LOAD | ADDR_PRE | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"ldrsh", "ldrsh_reg_add", 0x0ff00ff0, 0x019000f0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3},
 LOAD | ADDR_PRE | ADDR_INC, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"ldrsh", "ldrsh_reg_add_post", 0x0ff00ff0, 0x009000f0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3},
 LOAD | ADDR_POST | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"ldrsh", "ldrsh_reg_add_pre", 0x0ff00ff0, 0x01b000f0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3},
 LOAD | ADDR_PRE | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"ldrsh", "ldrsh_reg_sub", 0x0ff00ff0, 0x011000f0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3},
 LOAD | ADDR_PRE | ADDR_DEC, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"ldrsh", "ldrsh_reg_sub_post", 0x0ff00ff0, 0x001000f0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3},
 LOAD | ADDR_POST | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"ldrsh", "ldrsh_reg_sub_pre", 0x0ff00ff0, 0x013000f0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3},
 LOAD | ADDR_PRE | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"mla", "mla", 0x0ff000f0, 0x00200090,
 5, {OK::PRED_28_31, OK::REG_16_19, OK::REG_0_3, OK::REG_8_11, OK::REG_12_15},
 MULACC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"mlas", "mlas", 0x0ff000f0, 0x00300090,
 5, {OK::PRED_28_31, OK::REG_16_19, OK::REG_0_3, OK::REG_8_11, OK::REG_12_15},
 MULACC, MEM_WIDTH::NA, SR_UPDATE::NZ
},
{"mls", "mls", 0x0ff000f0, 0x00600090,
 5, {OK::PRED_28_31, OK::REG_16_19, OK::REG_0_3, OK::REG_8_11, OK::REG_12_15},
 MULACC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"mov", "mov_imm", 0x0fff0000, 0x03a00000,
 3, {OK::PRED_28_31, OK::REG_12_15, OK::IMM_0_7_8_11},
 ALU1, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"mov", "mov_regimm", 0x0fff0010, 0x01a00000,
 5, {OK::PRED_28_31, OK::REG_12_15, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::IMM_7_11},
 ALU1, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"mov", "mov_regreg", 0x0fff0090, 0x01a00010,
 5, {OK::PRED_28_31, OK::REG_12_15, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::REG_8_11},
 ALU1, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"movs", "movs_imm", 0x0fff0000, 0x03b00000,
 3, {OK::PRED_28_31, OK::REG_12_15, OK::IMM_0_7_8_11},
 ALU1, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"movs", "movs_regimm", 0x0fff0010, 0x01b00000,
 5, {OK::PRED_28_31, OK::REG_12_15, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::IMM_7_11},
 ALU1, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"movs", "movs_regreg", 0x0fff0090, 0x01b00010,
 5, {OK::PRED_28_31, OK::REG_12_15, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::REG_8_11},
 ALU1, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"movt", "movt", 0x0ff00000, 0x03400000,
 3, {OK::PRED_28_31, OK::REG_12_15, OK::IMM_0_11_16_19},
 ALU1, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"movw", "movw", 0x0ff00000, 0x03000000,
 3, {OK::PRED_28_31, OK::REG_12_15, OK::IMM_0_11_16_19},
 ALU1, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"mul", "mul", 0x0ff0f0f0, 0x00000090,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::REG_0_3, OK::REG_8_11},
 MUL, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"muls", "muls", 0x0ff0f0f0, 0x00100090,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::REG_0_3, OK::REG_8_11},
 MUL, MEM_WIDTH::NA, SR_UPDATE::NZ
},
{"mvn", "mvn_imm", 0x0fff0000, 0x03e00000,
 3, {OK::PRED_28_31, OK::REG_12_15, OK::IMM_0_7_8_11},
 ALU1, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"mvn", "mvn_regimm", 0x0fff0010, 0x01e00000,
 5, {OK::PRED_28_31, OK::REG_12_15, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::IMM_7_11},
 ALU1, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"mvn", "mvn_regreg", 0x0fff0090, 0x01e00010,
 5, {OK::PRED_28_31, OK::REG_12_15, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::REG_8_11},
 ALU1, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"mvns", "mvns_imm", 0x0fff0000, 0x03f00000,
 3, {OK::PRED_28_31, OK::REG_12_15, OK::IMM_0_7_8_11},
 ALU1, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"mvns", "mvns_regimm", 0x0fff0010, 0x01f00000,
 5, {OK::PRED_28_31, OK::REG_12_15, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::IMM_7_11},
 ALU1, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"mvns", "mvns_regreg", 0x0fff0090, 0x01f00010,
 5, {OK::PRED_28_31, OK::REG_12_15, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::REG_8_11},
 ALU1, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"orr", "orr_imm", 0x0ff00000, 0x03800000,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::IMM_0_7_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"orr", "orr_regimm", 0x0ff00010, 0x01800000,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::IMM_7_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"orr", "orr_regreg", 0x0ff00090, 0x01800010,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::REG_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"orrs", "orrs_imm", 0x0ff00000, 0x03900000,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::IMM_0_7_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"orrs", "orrs_regimm", 0x0ff00010, 0x01900000,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::IMM_7_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"orrs", "orrs_regreg", 0x0ff00090, 0x01900010,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::REG_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"rbit", "rbit", 0x0fff0ff0, 0x06ff0f30,
 3, {OK::PRED_28_31, OK::REG_12_15, OK::REG_0_3},
 BYTEREORDER, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"rev", "rev", 0x0fff0ff0, 0x06bf0f30,
 3, {OK::PRED_28_31, OK::REG_12_15, OK::REG_0_3},
 BYTEREORDER, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"rev16", "rev16", 0x0fff0ff0, 0x06bf0fb0,
 3, {OK::PRED_28_31, OK::REG_12_15, OK::REG_0_3},
 BYTEREORDER, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"rsb", "rsb_imm", 0x0ff00000, 0x02600000,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::IMM_0_7_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"rsb", "rsb_regimm", 0x0ff00010, 0x00600000,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::IMM_7_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"rsb", "rsb_regreg", 0x0ff00090, 0x00600010,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::REG_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"rsbs", "rsbs_imm", 0x0ff00000, 0x02700000,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::IMM_0_7_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"rsbs", "rsbs_regimm", 0x0ff00010, 0x00700000,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::IMM_7_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"rsbs", "rsbs_regreg", 0x0ff00090, 0x00700010,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::REG_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"rsc", "rsc_imm", 0x0ff00000, 0x02e00000,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::IMM_0_7_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"rsc", "rsc_regimm", 0x0ff00010, 0x00e00000,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::IMM_7_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"rsc", "rsc_regreg", 0x0ff00090, 0x00e00010,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::REG_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"rscs", "rscs_imm", 0x0ff00000, 0x02f00000,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::IMM_0_7_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"rscs", "rscs_regimm", 0x0ff00010, 0x00f00000,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::IMM_7_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"rscs", "rscs_regreg", 0x0ff00090, 0x00f00010,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::REG_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"sbc", "sbc_imm", 0x0ff00000, 0x02c00000,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::IMM_0_7_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"sbc", "sbc_regimm", 0x0ff00010, 0x00c00000,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::IMM_7_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"sbc", "sbc_regreg", 0x0ff00090, 0x00c00010,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::REG_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"sbcs", "sbcs_imm", 0x0ff00000, 0x02d00000,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::IMM_0_7_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"sbcs", "sbcs_regimm", 0x0ff00010, 0x00d00000,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::IMM_7_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"sbcs", "sbcs_regreg", 0x0ff00090, 0x00d00010,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::REG_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"sdiv", "sdiv", 0x0ff0f0f0, 0x0710f010,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::REG_0_3, OK::REG_8_11},
 DIV, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"smlabb", "smlabb", 0x0ff000f0, 0x01000080,
 5, {OK::PRED_28_31, OK::REG_16_19, OK::REG_0_3, OK::REG_8_11, OK::REG_12_15},
 MULACC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"smlabt", "smlabt", 0x0ff000f0, 0x010000c0,
 5, {OK::PRED_28_31, OK::REG_16_19, OK::REG_0_3, OK::REG_8_11, OK::REG_12_15},
 MULACC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"smlal", "smlal", 0x0ff000f0, 0x00e00090,
 5, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3, OK::REG_8_11},
 DST_0_1 | MULACC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"smlals", "smlals", 0x0ff000f0, 0x00f00090,
 5, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3, OK::REG_8_11},
 DST_0_1 | MULACC, MEM_WIDTH::NA, SR_UPDATE::NZ
},
{"smlatb", "smlatb", 0x0ff000f0, 0x010000a0,
 5, {OK::PRED_28_31, OK::REG_16_19, OK::REG_0_3, OK::REG_8_11, OK::REG_12_15},
 MULACC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"smlatt", "smlatt", 0x0ff000f0, 0x010000e0,
 5, {OK::PRED_28_31, OK::REG_16_19, OK::REG_0_3, OK::REG_8_11, OK::REG_12_15},
 MULACC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"smulbb", "smulbb", 0x0ff0f0f0, 0x01600080,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::REG_0_3, OK::REG_8_11},
 MUL, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"smulbt", "smulbt", 0x0ff0f0f0, 0x016000c0,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::REG_0_3, OK::REG_8_11},
 MUL, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"smull", "smull", 0x0ff000f0, 0x00c00090,
 5, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3, OK::REG_8_11},
 RESULT_64BIT | SRC_DST_0_1 | MUL, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"smulls", "smulls", 0x0ff000f0, 0x00d00090,
 5, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3, OK::REG_8_11},
 RESULT_64BIT | SRC_DST_0_1 | MUL, MEM_WIDTH::NA, SR_UPDATE::NZ
},
{"smultb", "smultb", 0x0ff0f0f0, 0x016000a0,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::REG_0_3, OK::REG_8_11},
 MUL, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"smultt", "smultt", 0x0ff0f0f0, 0x016000e0,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::REG_0_3, OK::REG_8_11},
 MUL, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"stmda", "stmda", 0x0ff00000, 0x08000000,
 3, {OK::PRED_28_31, OK::REG_16_19, OK::REGLIST_0_15},
 STORE | MULTIPLE | ADDR_POST | ADDR_DEC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"stmda", "stmda_update", 0x0ff00000, 0x08200000,
 3, {OK::PRED_28_31, OK::REG_16_19, OK::REGLIST_0_15},
 STORE | MULTIPLE | ADDR_POST | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"stmdb", "stmdb", 0x0ff00000, 0x09000000,
 3, {OK::PRED_28_31, OK::REG_16_19, OK::REGLIST_0_15},
 STORE | MULTIPLE | ADDR_PRE | ADDR_DEC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"stmdb", "stmdb_update", 0x0ff00000, 0x09200000,
 3, {OK::PRED_28_31, OK::REG_16_19, OK::REGLIST_0_15},
 STORE | MULTIPLE | ADDR_PRE | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"stmia", "stmia", 0x0ff00000, 0x08800000,
 3, {OK::PRED_28_31, OK::REG_16_19, OK::REGLIST_0_15},
 STORE | MULTIPLE | ADDR_POST | ADDR_INC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"stmia", "stmia_update", 0x0ff00000, 0x08a00000,
 3, {OK::PRED_28_31, OK::REG_16_19, OK::REGLIST_0_15},
 STORE | MULTIPLE | ADDR_POST | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"stmib", "stmib", 0x0ff00000, 0x09800000,
 3, {OK::PRED_28_31, OK::REG_16_19, OK::REGLIST_0_15},
 STORE | MULTIPLE | ADDR_PRE | ADDR_INC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"stmib", "stmib_update", 0x0ff00000, 0x09a00000,
 3, {OK::PRED_28_31, OK::REG_16_19, OK::REGLIST_0_15},
 STORE | MULTIPLE | ADDR_PRE | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"str", "str_imm_add", 0x0ff00000, 0x05800000,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::IMM_0_11, OK::REG_12_15},
 STORE | ADDR_PRE | ADDR_INC, MEM_WIDTH::W4, SR_UPDATE::NONE
},
{"str", "str_imm_add_post", 0x0ff00000, 0x04800000,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::IMM_0_11, OK::REG_12_15},
 STORE | ADDR_POST | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W4, SR_UPDATE::NONE
},
{"str", "str_imm_add_pre", 0x0ff00000, 0x05a00000,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::IMM_0_11, OK::REG_12_15},
 STORE | ADDR_PRE | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W4, SR_UPDATE::NONE
},
{"str", "str_imm_sub", 0x0ff00000, 0x05000000,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::IMM_0_11, OK::REG_12_15},
 STORE | ADDR_PRE | ADDR_DEC, MEM_WIDTH::W4, SR_UPDATE::NONE
},
{"str", "str_imm_sub_post", 0x0ff00000, 0x04000000,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::IMM_0_11, OK::REG_12_15},
 STORE | ADDR_POST | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W4, SR_UPDATE::NONE
},
{"str", "str_imm_sub_pre", 0x0ff00000, 0x05200000,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::IMM_0_11, OK::REG_12_15},
 STORE | ADDR_PRE | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W4, SR_UPDATE::NONE
},
{"str", "str_reg_add", 0x0ff00010, 0x07800000,
 6, {OK::PRED_28_31, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::IMM_7_11, OK::REG_12_15},
 STORE | ADDR_PRE | ADDR_INC, MEM_WIDTH::W4, SR_UPDATE::NONE
},
{"str", "str_reg_add_post", 0x0ff00010, 0x06800000,
 6, {OK::PRED_28_31, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::IMM_7_11, OK::REG_12_15},
 STORE | ADDR_POST | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W4, SR_UPDATE::NONE
},
{"str", "str_reg_add_pre", 0x0ff00010, 0x07a00000,
 6, {OK::PRED_28_31, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::IMM_7_11, OK::REG_12_15},
 STORE | ADDR_PRE | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W4, SR_UPDATE::NONE
},
{"str", "str_reg_sub", 0x0ff00010, 0x07000000,
 6, {OK::PRED_28_31, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::IMM_7_11, OK::REG_12_15},
 STORE | ADDR_PRE | ADDR_DEC, MEM_WIDTH::W4, SR_UPDATE::NONE
},
{"str", "str_reg_sub_post", 0x0ff00010, 0x06000000,
 6, {OK::PRED_28_31, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::IMM_7_11, OK::REG_12_15},
 STORE | ADDR_POST | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W4, SR_UPDATE::NONE
},
{"str", "str_reg_sub_pre", 0x0ff00010, 0x07200000,
 6, {OK::PRED_28_31, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::IMM_7_11, OK::REG_12_15},
 STORE | ADDR_PRE | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W4, SR_UPDATE::NONE
},
{"strb", "strb_imm_add", 0x0ff00000, 0x05c00000,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::IMM_0_11, OK::REG_12_15},
 STORE | ADDR_PRE | ADDR_INC, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"strb", "strb_imm_add_post", 0x0ff00000, 0x04c00000,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::IMM_0_11, OK::REG_12_15},
 STORE | ADDR_POST | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"strb", "strb_imm_add_pre", 0x0ff00000, 0x05e00000,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::IMM_0_11, OK::REG_12_15},
 STORE | ADDR_PRE | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"strb", "strb_imm_sub", 0x0ff00000, 0x05400000,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::IMM_0_11, OK::REG_12_15},
 STORE | ADDR_PRE | ADDR_DEC, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"strb", "strb_imm_sub_post", 0x0ff00000, 0x04400000,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::IMM_0_11, OK::REG_12_15},
 STORE | ADDR_POST | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"strb", "strb_imm_sub_pre", 0x0ff00000, 0x05600000,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::IMM_0_11, OK::REG_12_15},
 STORE | ADDR_PRE | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"strb", "strb_reg_add", 0x0ff00010, 0x07c00000,
 6, {OK::PRED_28_31, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::IMM_7_11, OK::REG_12_15},
 STORE | ADDR_PRE | ADDR_INC, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"strb", "strb_reg_add_post", 0x0ff00010, 0x06c00000,
 6, {OK::PRED_28_31, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::IMM_7_11, OK::REG_12_15},
 STORE | ADDR_POST | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"strb", "strb_reg_add_pre", 0x0ff00010, 0x07e00000,
 6, {OK::PRED_28_31, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::IMM_7_11, OK::REG_12_15},
 STORE | ADDR_PRE | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"strb", "strb_reg_sub", 0x0ff00010, 0x07400000,
 6, {OK::PRED_28_31, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::IMM_7_11, OK::REG_12_15},
 STORE | ADDR_PRE | ADDR_DEC, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"strb", "strb_reg_sub_post", 0x0ff00010, 0x06400000,
 6, {OK::PRED_28_31, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::IMM_7_11, OK::REG_12_15},
 STORE | ADDR_POST | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"strb", "strb_reg_sub_pre", 0x0ff00010, 0x07600000,
 6, {OK::PRED_28_31, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::IMM_7_11, OK::REG_12_15},
 STORE | ADDR_PRE | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"strd", "strd_imm_add", 0x0ff000f0, 0x01c000f0,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::IMM_0_3_8_11, OK::REG_PAIR_12_15},
 STORE | ADDR_PRE | ADDR_INC, MEM_WIDTH::W8, SR_UPDATE::NONE
},
{"strd", "strd_imm_add_post", 0x0ff000f0, 0x00c000f0,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::IMM_0_3_8_11, OK::REG_PAIR_12_15},
 STORE | ADDR_POST | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W8, SR_UPDATE::NONE
},
{"strd", "strd_imm_add_pre", 0x0ff000f0, 0x01e000f0,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::IMM_0_3_8_11, OK::REG_PAIR_12_15},
 STORE | ADDR_PRE | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W8, SR_UPDATE::NONE
},
{"strd", "strd_imm_sub", 0x0ff000f0, 0x014000f0,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::IMM_0_3_8_11, OK::REG_PAIR_12_15},
 STORE | ADDR_PRE | ADDR_DEC, MEM_WIDTH::W8, SR_UPDATE::NONE
},
{"strd", "strd_imm_sub_post", 0x0ff000f0, 0x004000f0,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::IMM_0_3_8_11, OK::REG_PAIR_12_15},
 STORE | ADDR_POST | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W8, SR_UPDATE::NONE
},
{"strd", "strd_imm_sub_pre", 0x0ff000f0, 0x016000f0,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::IMM_0_3_8_11, OK::REG_PAIR_12_15},
 STORE | ADDR_PRE | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W8, SR_UPDATE::NONE
},
{"strd", "strd_reg_add", 0x0ff00ff0, 0x018000f0,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::REG_0_3, OK::REG_PAIR_12_15},
 STORE | ADDR_PRE | ADDR_INC, MEM_WIDTH::W8, SR_UPDATE::NONE
},
{"strd", "strd_reg_add_post", 0x0ff00ff0, 0x008000f0,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::REG_0_3, OK::REG_PAIR_12_15},
 STORE | ADDR_POST | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W8, SR_UPDATE::NONE
},
{"strd", "strd_reg_add_pre", 0x0ff00ff0, 0x01a000f0,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::REG_0_3, OK::REG_PAIR_12_15},
 STORE | ADDR_PRE | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W8, SR_UPDATE::NONE
},
{"strd", "strd_reg_sub", 0x0ff00ff0, 0x010000f0,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::REG_0_3, OK::REG_PAIR_12_15},
 STORE | ADDR_PRE | ADDR_DEC, MEM_WIDTH::W8, SR_UPDATE::NONE
},
{"strd", "strd_reg_sub_post", 0x0ff00ff0, 0x000000f0,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::REG_0_3, OK::REG_PAIR_12_15},
 STORE | ADDR_POST | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W8, SR_UPDATE::NONE
},
{"strd", "strd_reg_sub_pre", 0x0ff00ff0, 0x012000f0,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::REG_0_3, OK::REG_PAIR_12_15},
 STORE | ADDR_PRE | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W8, SR_UPDATE::NONE
},
{"strex", "strex", 0x0ff00ff0, 0x01800f90,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3},
 STORE | ATOMIC, MEM_WIDTH::W4, SR_UPDATE::NONE
},
{"strexb", "strexb", 0x0ff00ff0, 0x01c00f90,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3},
 STORE | ATOMIC, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"strexh", "strexh", 0x0ff00ff0, 0x01e00f90,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3},
 STORE | ATOMIC, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"strh", "strh_imm_add", 0x0ff000f0, 0x01c000b0,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::IMM_0_3_8_11, OK::REG_12_15},
 STORE | ADDR_PRE | ADDR_INC, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"strh", "strh_imm_add_post", 0x0ff000f0, 0x00c000b0,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::IMM_0_3_8_11, OK::REG_12_15},
 STORE | ADDR_POST | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"strh", "strh_imm_add_pre", 0x0ff000f0, 0x01e000b0,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::IMM_0_3_8_11, OK::REG_12_15},
 STORE | ADDR_PRE | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"strh", "strh_imm_sub", 0x0ff000f0, 0x014000b0,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::IMM_0_3_8_11, OK::REG_12_15},
 STORE | ADDR_PRE | ADDR_DEC, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"strh", "strh_imm_sub_post", 0x0ff000f0, 0x004000b0,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::IMM_0_3_8_11, OK::REG_12_15},
 STORE | ADDR_POST | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"strh", "strh_imm_sub_pre", 0x0ff000f0, 0x016000b0,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::IMM_0_3_8_11, OK::REG_12_15},
 STORE | ADDR_PRE | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"strh", "strh_reg_add", 0x0ff00ff0, 0x018000b0,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::REG_0_3, OK::REG_12_15},
 STORE | ADDR_PRE | ADDR_INC, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"strh", "strh_reg_add_post", 0x0ff00ff0, 0x008000b0,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::REG_0_3, OK::REG_12_15},
 STORE | ADDR_POST | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"strh", "strh_reg_add_pre", 0x0ff00ff0, 0x01a000b0,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::REG_0_3, OK::REG_12_15},
 STORE | ADDR_PRE | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"strh", "strh_reg_sub", 0x0ff00ff0, 0x010000b0,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::REG_0_3, OK::REG_12_15},
 STORE | ADDR_PRE | ADDR_DEC, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"strh", "strh_reg_sub_post", 0x0ff00ff0, 0x000000b0,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::REG_0_3, OK::REG_12_15},
 STORE | ADDR_POST | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"strh", "strh_reg_sub_pre", 0x0ff00ff0, 0x012000b0,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::REG_0_3, OK::REG_12_15},
 STORE | ADDR_PRE | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"sub", "sub_imm", 0x0ff00000, 0x02400000,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::IMM_0_7_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"sub", "sub_regimm", 0x0ff00010, 0x00400000,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::IMM_7_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"sub", "sub_regreg", 0x0ff00090, 0x00400010,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::REG_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"subs", "subs_imm", 0x0ff00000, 0x02500000,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::IMM_0_7_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"subs", "subs_regimm", 0x0ff00010, 0x00500000,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::IMM_7_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"subs", "subs_regreg", 0x0ff00090, 0x00500010,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::REG_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"svc", "svc", 0x0f000000, 0x0f000000,
 2, {OK::PRED_28_31, OK::IMM_0_23},
 SYSCALL, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"swp", "swp", 0x0ff00ff0, 0x01000090,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_0_3, OK::REG_16_19},
 ATOMIC, MEM_WIDTH::W4, SR_UPDATE::NONE
},
{"swpb", "swpb", 0x0ff00ff0, 0x01400090,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_0_3, OK::REG_16_19},
 ATOMIC, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"sxtab", "sxtab", 0x0ff003f0, 0x06a00070,
 5, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3, OK::IMM_10_11_TIMES_8},
 SIGNEXTEND, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"sxtab16", "sxtab16", 0x0ff003f0, 0x06800070,
 5, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3, OK::IMM_10_11_TIMES_8},
 SIGNEXTEND, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"sxtah", "sxtah", 0x0ff003f0, 0x06b00070,
 5, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3, OK::IMM_10_11_TIMES_8},
 SIGNEXTEND, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"sxtb", "sxtb", 0x0fff03f0, 0x06af0070,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_0_3, OK::IMM_10_11_TIMES_8},
 SIGNEXTEND, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"sxtb16", "sxtb16", 0x0fff03f0, 0x068f0070,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_0_3, OK::IMM_10_11_TIMES_8},
 SIGNEXTEND, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"sxth", "sxth", 0x0fff03f0, 0x06bf0070,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_0_3, OK::IMM_10_11_TIMES_8},
 SIGNEXTEND, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"teq", "teq_imm", 0x0ff0f000, 0x03300000,
 3, {OK::PRED_28_31, OK::REG_16_19, OK::IMM_0_7_8_11},
 TEST, MEM_WIDTH::NA, SR_UPDATE::NCZ
},
{"teq", "teq_regimm", 0x0ff0f010, 0x01300000,
 5, {OK::PRED_28_31, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::IMM_7_11},
 TEST, MEM_WIDTH::NA, SR_UPDATE::NCZ
},
{"teq", "teq_regreg", 0x0ff0f090, 0x01300010,
 5, {OK::PRED_28_31, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::REG_8_11},
 TEST, MEM_WIDTH::NA, SR_UPDATE::NCZ
},
{"tst", "tst_imm", 0x0ff0f000, 0x03100000,
 3, {OK::PRED_28_31, OK::REG_16_19, OK::IMM_0_7_8_11},
 TEST, MEM_WIDTH::NA, SR_UPDATE::NCZ
},
{"tst", "tst_regimm", 0x0ff0f010, 0x01100000,
 5, {OK::PRED_28_31, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::IMM_7_11},
 TEST, MEM_WIDTH::NA, SR_UPDATE::NCZ
},
{"tst", "tst_regreg", 0x0ff0f090, 0x01100010,
 5, {OK::PRED_28_31, OK::REG_16_19, OK::REG_0_3, OK::SHIFT_MODE_5_6, OK::REG_8_11},
 TEST, MEM_WIDTH::NA, SR_UPDATE::NCZ
},
{"ud2", "ud2", 0x0fffffff, 0x07f000f0,
 1, {OK::PRED_28_31},
 MISC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"udiv", "udiv", 0x0ff0f0f0, 0x0730f010,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::REG_0_3, OK::REG_8_11},
 DIV, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"umlal", "umlal", 0x0ff000f0, 0x00a00090,
 5, {OK::PRED_28_31, OK::REG_16_19, OK::REG_12_15, OK::REG_0_3, OK::REG_8_11},
 DST_0_1 | MULACC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"umlals", "umlals", 0x0ff000f0, 0x00b00090,
 5, {OK::PRED_28_31, OK::REG_16_19, OK::REG_12_15, OK::REG_0_3, OK::REG_8_11},
 DST_0_1 | MULACC, MEM_WIDTH::NA, SR_UPDATE::NZ
},
{"umull", "umull", 0x0ff000f0, 0x00800090,
 5, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3, OK::REG_8_11},
 DST_0_1 | MUL, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"umulls", "umulls", 0x0ff000f0, 0x00900090,
 5, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3, OK::REG_8_11},
 DST_0_1 | MUL, MEM_WIDTH::NA, SR_UPDATE::NZ
},
{"uxtab", "uxtab", 0x0ff003f0, 0x06e00070,
 5, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3, OK::IMM_10_11_TIMES_8},
 SIGNEXTEND, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"uxtab16", "uxtab16", 0x0ff003f0, 0x06c00070,
 5, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3, OK::IMM_10_11_TIMES_8},
 SIGNEXTEND, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"uxtah", "uxtah", 0x0ff003f0, 0x06f00070,
 5, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3, OK::IMM_10_11_TIMES_8},
 SIGNEXTEND, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"uxtb", "uxtb", 0x0fff03f0, 0x06ef0070,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_0_3, OK::IMM_10_11_TIMES_8},
 SIGNEXTEND, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"uxtb16", "uxtb16", 0x0fff03f0, 0x06cf0070,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_0_3, OK::IMM_10_11_TIMES_8},
 SIGNEXTEND, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"uxth", "uxth", 0x0fff03f0, 0x06ff0070,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_0_3, OK::IMM_10_11_TIMES_8},
 SIGNEXTEND, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vabs.f32", "vabs_f32", 0x0fbf0fd0, 0x0eb00ac0,
 3, {OK::PRED_28_31, OK::SREG_12_15_22, OK::SREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vabs.f64", "vabs_f64", 0x0fbf0fd0, 0x0eb00bc0,
 3, {OK::PRED_28_31, OK::DREG_12_15_22, OK::DREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vadd.f32", "vadd_f32", 0x0fb00f50, 0x0e300a00,
 4, {OK::PRED_28_31, OK::SREG_12_15_22, OK::SREG_16_19_7, OK::SREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vadd.f64", "vadd_f64", 0x0fb00f50, 0x0e300b00,
 4, {OK::PRED_28_31, OK::DREG_12_15_22, OK::DREG_16_19_7, OK::DREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vcmp.f32", "vcmp_f32", 0x0fbf0fd0, 0x0eb40a40,
 3, {OK::PRED_28_31, OK::SREG_12_15_22, OK::SREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vcmp.f32", "vcmp_f32_zero", 0x0fbf0fff, 0x0eb50a40,
 3, {OK::PRED_28_31, OK::SREG_12_15_22, OK::IMM_FLT_ZERO},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vcmp.f64", "vcmp_f64", 0x0fbf0fd0, 0x0eb40b40,
 3, {OK::PRED_28_31, OK::DREG_12_15_22, OK::DREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vcmp.f64", "vcmp_f64_zero", 0x0fbf0fff, 0x0eb50b40,
 3, {OK::PRED_28_31, OK::DREG_12_15_22, OK::IMM_FLT_ZERO},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vcmpe.f32", "vcmpe_f32", 0x0fbf0fd0, 0x0eb40ac0,
 3, {OK::PRED_28_31, OK::SREG_12_15_22, OK::SREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vcmpe.f32", "vcmpe_f32_zero", 0x0fbf0fff, 0x0eb50ac0,
 3, {OK::PRED_28_31, OK::SREG_12_15_22, OK::IMM_FLT_ZERO},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vcmpe.f64", "vcmpe_f64", 0x0fbf0fd0, 0x0eb40bc0,
 3, {OK::PRED_28_31, OK::DREG_12_15_22, OK::DREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vcmpe.f64", "vcmpe_f64_zero", 0x0fbf0fff, 0x0eb50bc0,
 3, {OK::PRED_28_31, OK::DREG_12_15_22, OK::IMM_FLT_ZERO},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vcvt.f32.f64", "vcvt_f32_f64", 0x0fbf0fd0, 0x0eb70bc0,
 3, {OK::PRED_28_31, OK::SREG_12_15_22, OK::DREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vcvt.f32.s32", "vcvt_f32_s32", 0x0fbf0fd0, 0x0eb80ac0,
 3, {OK::PRED_28_31, OK::SREG_12_15_22, OK::SREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vcvt.f32.u32", "vcvt_f32_u32", 0x0fbf0fd0, 0x0eb80a40,
 3, {OK::PRED_28_31, OK::SREG_12_15_22, OK::SREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vcvt.f64.f32", "vcvt_f64_f32", 0x0fbf0fd0, 0x0eb70ac0,
 3, {OK::PRED_28_31, OK::DREG_12_15_22, OK::SREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vcvt.f64.s32", "vcvt_f64_s32", 0x0fbf0fd0, 0x0eb80bc0,
 3, {OK::PRED_28_31, OK::DREG_12_15_22, OK::SREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vcvt.f64.u32", "vcvt_f64_u32", 0x0fbf0fd0, 0x0eb80b40,
 3, {OK::PRED_28_31, OK::DREG_12_15_22, OK::SREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vcvt.s32.f32", "vcvt_s32_f32", 0x0fbf0fd0, 0x0ebd0ac0,
 3, {OK::PRED_28_31, OK::SREG_12_15_22, OK::SREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vcvt.s32.f64", "vcvt_s32_f64", 0x0fbf0fd0, 0x0ebd0bc0,
 3, {OK::PRED_28_31, OK::SREG_12_15_22, OK::DREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vcvt.u32.f32", "vcvt_u32_f32", 0x0fbf0fd0, 0x0ebc0ac0,
 3, {OK::PRED_28_31, OK::SREG_12_15_22, OK::SREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vcvt.u32.f64", "vcvt_u32_f64", 0x0fbf0fd0, 0x0ebc0bc0,
 3, {OK::PRED_28_31, OK::SREG_12_15_22, OK::DREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vdiv.f32", "vdiv_f32", 0x0fb00f50, 0x0e800a00,
 4, {OK::PRED_28_31, OK::SREG_12_15_22, OK::SREG_16_19_7, OK::SREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vdiv.f64", "vdiv_f64", 0x0fb00f50, 0x0e800b00,
 4, {OK::PRED_28_31, OK::DREG_12_15_22, OK::DREG_16_19_7, OK::DREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vldmda", "vldmda_f", 0x0fb00f01, 0x0c100b00,
 4, {OK::PRED_28_31, OK::DREG_12_15_22, OK::REG_RANGE_1_7, OK::REG_16_19},
 LOAD | MULTIPLE | VFP | ADDR_POST | ADDR_DEC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vldmda", "vldmda_f_update", 0x0fb00f01, 0x0c300b00,
 4, {OK::PRED_28_31, OK::DREG_12_15_22, OK::REG_RANGE_1_7, OK::REG_16_19},
 LOAD | MULTIPLE | VFP | ADDR_POST | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vldmda", "vldmda_s", 0x0fb00f00, 0x0c100a00,
 4, {OK::PRED_28_31, OK::SREG_12_15_22, OK::REG_RANGE_0_7, OK::REG_16_19},
 LOAD | MULTIPLE | VFP | ADDR_POST | ADDR_DEC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vldmda", "vldmda_s_update", 0x0fb00f00, 0x0c300a00,
 4, {OK::PRED_28_31, OK::SREG_12_15_22, OK::REG_RANGE_0_7, OK::REG_16_19},
 LOAD | MULTIPLE | VFP | ADDR_POST | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vldmdb", "vldmdb_f", 0x0fb00f01, 0x0d100b00,
 4, {OK::PRED_28_31, OK::DREG_12_15_22, OK::REG_RANGE_1_7, OK::REG_16_19},
 LOAD | MULTIPLE | VFP | ADDR_PRE | ADDR_DEC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vldmdb", "vldmdb_f_update", 0x0fb00f01, 0x0d300b00,
 4, {OK::PRED_28_31, OK::DREG_12_15_22, OK::REG_RANGE_1_7, OK::REG_16_19},
 LOAD | MULTIPLE | VFP | ADDR_PRE | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vldmdb", "vldmdb_s", 0x0fb00f00, 0x0d100a00,
 4, {OK::PRED_28_31, OK::SREG_12_15_22, OK::REG_RANGE_0_7, OK::REG_16_19},
 LOAD | MULTIPLE | VFP | ADDR_PRE | ADDR_DEC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vldmdb", "vldmdb_s_update", 0x0fb00f00, 0x0d300a00,
 4, {OK::PRED_28_31, OK::SREG_12_15_22, OK::REG_RANGE_0_7, OK::REG_16_19},
 LOAD | MULTIPLE | VFP | ADDR_PRE | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vldmia", "vldmia_f", 0x0fb00f01, 0x0c900b00,
 4, {OK::PRED_28_31, OK::DREG_12_15_22, OK::REG_RANGE_1_7, OK::REG_16_19},
 LOAD | MULTIPLE | VFP | ADDR_POST | ADDR_INC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vldmia", "vldmia_f_update", 0x0fb00f01, 0x0cb00b00,
 4, {OK::PRED_28_31, OK::DREG_12_15_22, OK::REG_RANGE_1_7, OK::REG_16_19},
 LOAD | MULTIPLE | VFP | ADDR_POST | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vldmia", "vldmia_s", 0x0fb00f00, 0x0c900a00,
 4, {OK::PRED_28_31, OK::SREG_12_15_22, OK::REG_RANGE_0_7, OK::REG_16_19},
 LOAD | MULTIPLE | VFP | ADDR_POST | ADDR_INC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vldmia", "vldmia_s_update", 0x0fb00f00, 0x0cb00a00,
 4, {OK::PRED_28_31, OK::SREG_12_15_22, OK::REG_RANGE_0_7, OK::REG_16_19},
 LOAD | MULTIPLE | VFP | ADDR_POST | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vldmib", "vldmib_f", 0x0fb00f01, 0x0d900b00,
 4, {OK::PRED_28_31, OK::DREG_12_15_22, OK::REG_RANGE_1_7, OK::REG_16_19},
 LOAD | MULTIPLE | VFP | ADDR_PRE | ADDR_INC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vldmib", "vldmib_f_update", 0x0fb00f01, 0x0db00b00,
 4, {OK::PRED_28_31, OK::DREG_12_15_22, OK::REG_RANGE_1_7, OK::REG_16_19},
 LOAD | MULTIPLE | VFP | ADDR_PRE | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vldmib", "vldmib_s", 0x0fb00f00, 0x0d900a00,
 4, {OK::PRED_28_31, OK::SREG_12_15_22, OK::REG_RANGE_0_7, OK::REG_16_19},
 LOAD | MULTIPLE | VFP | ADDR_PRE | ADDR_INC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vldmib", "vldmib_s_update", 0x0fb00f00, 0x0db00a00,
 4, {OK::PRED_28_31, OK::SREG_12_15_22, OK::REG_RANGE_0_7, OK::REG_16_19},
 LOAD | MULTIPLE | VFP | ADDR_PRE | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vldr", "vldr_f32_add", 0x0fb00f00, 0x0d900a00,
 4, {OK::PRED_28_31, OK::SREG_12_15_22, OK::REG_16_19, OK::IMM_0_7_TIMES_4},
 LOAD | VFP | ADDR_PRE | ADDR_INC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vldr", "vldr_f32_sub", 0x0fb00f00, 0x0d100a00,
 4, {OK::PRED_28_31, OK::SREG_12_15_22, OK::REG_16_19, OK::IMM_0_7_TIMES_4},
 LOAD | VFP | ADDR_PRE | ADDR_DEC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vldr", "vldr_f64_add", 0x0fb00f00, 0x0d900b00,
 4, {OK::PRED_28_31, OK::DREG_12_15_22, OK::REG_16_19, OK::IMM_0_7_TIMES_4},
 LOAD | VFP | ADDR_PRE | ADDR_INC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vldr", "vldr_f64_sub", 0x0fb00f00, 0x0d100b00,
 4, {OK::PRED_28_31, OK::DREG_12_15_22, OK::REG_16_19, OK::IMM_0_7_TIMES_4},
 LOAD | VFP | ADDR_PRE | ADDR_DEC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vmla.f32", "vmla_f32", 0x0fb00f50, 0x0e000a00,
 4, {OK::PRED_28_31, OK::SREG_12_15_22, OK::SREG_16_19_7, OK::SREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vmla.f64", "vmla_f64", 0x0fb00f50, 0x0e000b00,
 4, {OK::PRED_28_31, OK::DREG_12_15_22, OK::DREG_16_19_7, OK::DREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vmls.f32", "vmls_f32", 0x0fb00f50, 0x0e000a40,
 4, {OK::PRED_28_31, OK::SREG_12_15_22, OK::SREG_16_19_7, OK::SREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vmls.f64", "vmls_f64", 0x0fb00f50, 0x0e000b40,
 4, {OK::PRED_28_31, OK::DREG_12_15_22, OK::DREG_16_19_7, OK::DREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vmov", "vmov_atof", 0x0ff00fd0, 0x0c400b10,
 4, {OK::PRED_28_31, OK::DREG_0_3_5, OK::REG_12_15, OK::REG_16_19},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vmov", "vmov_atos", 0x0ff00f7f, 0x0e000a10,
 3, {OK::PRED_28_31, OK::SREG_16_19_7, OK::REG_12_15},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vmov.f32", "vmov_f32", 0x0fbf0fd0, 0x0eb00a40,
 3, {OK::PRED_28_31, OK::SREG_12_15_22, OK::SREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vmov.f64", "vmov_f64", 0x0fbf0fd0, 0x0eb00b40,
 3, {OK::PRED_28_31, OK::DREG_12_15_22, OK::DREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vmov", "vmov_ftoa", 0x0ff00fd0, 0x0c500b10,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::DREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vmov", "vmov_stoa", 0x0ff00f7f, 0x0e100a10,
 3, {OK::PRED_28_31, OK::REG_12_15, OK::SREG_16_19_7},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vmrs", "vmrs_APSR_nzcv_fpscr", 0x0fffffff, 0x0ef1fa10,
 1, {OK::PRED_28_31},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NCZV
},
{"vmul.f32", "vmul_f32", 0x0fb00f50, 0x0e200a00,
 4, {OK::PRED_28_31, OK::SREG_12_15_22, OK::SREG_16_19_7, OK::SREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vmul.f64", "vmul_f64", 0x0fb00f50, 0x0e200b00,
 4, {OK::PRED_28_31, OK::DREG_12_15_22, OK::DREG_16_19_7, OK::DREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vneg.f32", "vneg_f32", 0x0fbf0fd0, 0x0eb10a40,
 3, {OK::PRED_28_31, OK::SREG_12_15_22, OK::SREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vneg.f64", "vneg_f64", 0x0fbf0fd0, 0x0eb10b40,
 3, {OK::PRED_28_31, OK::DREG_12_15_22, OK::DREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vnmla.f32", "vnmla_f32", 0x0fb00f50, 0x0e100a40,
 4, {OK::PRED_28_31, OK::SREG_12_15_22, OK::SREG_16_19_7, OK::SREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vnmla.f64", "vnmla_f64", 0x0fb00f50, 0x0e100b40,
 4, {OK::PRED_28_31, OK::DREG_12_15_22, OK::DREG_16_19_7, OK::DREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vnmls.f32", "vnmls_f32", 0x0fb00f50, 0x0e100a00,
 4, {OK::PRED_28_31, OK::SREG_12_15_22, OK::SREG_16_19_7, OK::SREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vnmls.f64", "vnmls_f64", 0x0fb00f50, 0x0e100b00,
 4, {OK::PRED_28_31, OK::DREG_12_15_22, OK::DREG_16_19_7, OK::DREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vnmul.f32", "vnmul_f32", 0x0fb00f50, 0x0e200a40,
 4, {OK::PRED_28_31, OK::SREG_12_15_22, OK::SREG_16_19_7, OK::SREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vnmul.f64", "vnmul_f64", 0x0fb00f50, 0x0e200b40,
 4, {OK::PRED_28_31, OK::DREG_12_15_22, OK::DREG_16_19_7, OK::DREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vsqrt.f32", "vsqrt_f32", 0x0fbf0fd0, 0x0eb10ac0,
 3, {OK::PRED_28_31, OK::SREG_12_15_22, OK::SREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vsqrt.f64", "vsqrt_f64", 0x0fbf0fd0, 0x0eb10bc0,
 3, {OK::PRED_28_31, OK::DREG_12_15_22, OK::DREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vstmda", "vstmda_f", 0x0fb00f01, 0x0c000b00,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::DREG_12_15_22, OK::REG_RANGE_1_7},
 STORE | MULTIPLE | VFP | ADDR_POST | ADDR_DEC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vstmda", "vstmda_f_update", 0x0fb00f01, 0x0c200b00,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::DREG_12_15_22, OK::REG_RANGE_1_7},
 STORE | MULTIPLE | VFP | ADDR_POST | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vstmda", "vstmda_s", 0x0fb00f00, 0x0c000a00,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::SREG_12_15_22, OK::REG_RANGE_0_7},
 STORE | MULTIPLE | VFP | ADDR_POST | ADDR_DEC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vstmda", "vstmda_s_update", 0x0fb00f00, 0x0c200a00,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::SREG_12_15_22, OK::REG_RANGE_0_7},
 STORE | MULTIPLE | VFP | ADDR_POST | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vstmdb", "vstmdb_f", 0x0fb00f01, 0x0d000b00,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::DREG_12_15_22, OK::REG_RANGE_1_7},
 STORE | MULTIPLE | VFP | ADDR_PRE | ADDR_DEC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vstmdb", "vstmdb_f_update", 0x0fb00f01, 0x0d200b00,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::DREG_12_15_22, OK::REG_RANGE_1_7},
 STORE | MULTIPLE | VFP | ADDR_PRE | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vstmdb", "vstmdb_s", 0x0fb00f00, 0x0d000a00,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::SREG_12_15_22, OK::REG_RANGE_0_7},
 STORE | MULTIPLE | VFP | ADDR_PRE | ADDR_DEC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vstmdb", "vstmdb_s_update", 0x0fb00f00, 0x0d200a00,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::SREG_12_15_22, OK::REG_RANGE_0_7},
 STORE | MULTIPLE | VFP | ADDR_PRE | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vstmia", "vstmia_f", 0x0fb00f01, 0x0c800b00,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::DREG_12_15_22, OK::REG_RANGE_1_7},
 STORE | MULTIPLE | VFP | ADDR_POST | ADDR_INC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vstmia", "vstmia_f_update", 0x0fb00f01, 0x0ca00b00,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::DREG_12_15_22, OK::REG_RANGE_1_7},
 STORE | MULTIPLE | VFP | ADDR_POST | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vstmia", "vstmia_s", 0x0fb00f00, 0x0c800a00,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::SREG_12_15_22, OK::REG_RANGE_0_7},
 STORE | MULTIPLE | VFP | ADDR_POST | ADDR_INC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vstmia", "vstmia_s_update", 0x0fb00f00, 0x0ca00a00,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::SREG_12_15_22, OK::REG_RANGE_0_7},
 STORE | MULTIPLE | VFP | ADDR_POST | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vstmib", "vstmib_f", 0x0fb00f01, 0x0d800b00,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::DREG_12_15_22, OK::REG_RANGE_1_7},
 STORE | MULTIPLE | VFP | ADDR_PRE | ADDR_INC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vstmib", "vstmib_f_update", 0x0fb00f01, 0x0da00b00,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::DREG_12_15_22, OK::REG_RANGE_1_7},
 STORE | MULTIPLE | VFP | ADDR_PRE | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vstmib", "vstmib_s", 0x0fb00f00, 0x0d800a00,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::SREG_12_15_22, OK::REG_RANGE_0_7},
 STORE | MULTIPLE | VFP | ADDR_PRE | ADDR_INC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vstmib", "vstmib_s_update", 0x0fb00f00, 0x0da00a00,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::SREG_12_15_22, OK::REG_RANGE_0_7},
 STORE | MULTIPLE | VFP | ADDR_PRE | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vstr", "vstr_f32_add", 0x0fb00f00, 0x0d800a00,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::IMM_0_7_TIMES_4, OK::SREG_12_15_22},
 STORE | VFP | ADDR_PRE | ADDR_INC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vstr", "vstr_f32_sub", 0x0fb00f00, 0x0d000a00,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::IMM_0_7_TIMES_4, OK::SREG_12_15_22},
 STORE | VFP | ADDR_PRE | ADDR_DEC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vstr", "vstr_f64_add", 0x0fb00f00, 0x0d800b00,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::IMM_0_7_TIMES_4, OK::DREG_12_15_22},
 STORE | VFP | ADDR_PRE | ADDR_INC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vstr", "vstr_f64_sub", 0x0fb00f00, 0x0d000b00,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::IMM_0_7_TIMES_4, OK::DREG_12_15_22},
 STORE | VFP | ADDR_PRE | ADDR_DEC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vsub.f32", "vsub_f32", 0x0fb00f50, 0x0e300a40,
 4, {OK::PRED_28_31, OK::SREG_12_15_22, OK::SREG_16_19_7, OK::SREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vsub.f64", "vsub_f64", 0x0fb00f50, 0x0e300b40,
 4, {OK::PRED_28_31, OK::DREG_12_15_22, OK::DREG_16_19_7, OK::DREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
};

const OPC ClusteredOpcodeTable[] = {
  // cluster 0  size:6,
  OPC::mul, OPC::strh_reg_sub_post, OPC::ldrd_reg_sub_post, OPC::strd_reg_sub_post, OPC::and_regreg, OPC::and_regimm,
  // cluster 1  size:6,
  OPC::muls, OPC::ldrh_reg_sub_post, OPC::ldrsb_reg_sub_post, OPC::ldrsh_reg_sub_post, OPC::ands_regreg, OPC::ands_regimm,
  // cluster 2  size:3,
  OPC::mla, OPC::eor_regreg, OPC::eor_regimm,
  // cluster 3  size:3,
  OPC::mlas, OPC::eors_regreg, OPC::eors_regimm,
  // cluster 4  size:5,
  OPC::strh_imm_sub_post, OPC::ldrd_imm_sub_post, OPC::strd_imm_sub_post, OPC::sub_regreg, OPC::sub_regimm,
  // cluster 5  size:5,
  OPC::ldrh_imm_sub_post, OPC::ldrsb_imm_sub_post, OPC::ldrsh_imm_sub_post, OPC::subs_regreg, OPC::subs_regimm,
  // cluster 6  size:3,
  OPC::mls, OPC::rsb_regreg, OPC::rsb_regimm,
  // cluster 7  size:2,
  OPC::rsbs_regreg, OPC::rsbs_regimm,
  // cluster 8  size:6,
  OPC::umull, OPC::strh_reg_add_post, OPC::ldrd_reg_add_post, OPC::strd_reg_add_post, OPC::add_regreg, OPC::add_regimm,
  // cluster 9  size:6,
  OPC::umulls, OPC::ldrh_reg_add_post, OPC::ldrsb_reg_add_post, OPC::ldrsh_reg_add_post, OPC::adds_regreg, OPC::adds_regimm,
  // cluster 10  size:3,
  OPC::umlal, OPC::adc_regreg, OPC::adc_regimm,
  // cluster 11  size:3,
  OPC::umlals, OPC::adcs_regreg, OPC::adcs_regimm,
  // cluster 12  size:6,
  OPC::smull, OPC::strh_imm_add_post, OPC::ldrd_imm_add_post, OPC::strd_imm_add_post, OPC::sbc_regreg, OPC::sbc_regimm,
  // cluster 13  size:6,
  OPC::smulls, OPC::ldrh_imm_add_post, OPC::ldrsb_imm_add_post, OPC::ldrsh_imm_add_post, OPC::sbcs_regreg, OPC::sbcs_regimm,
  // cluster 14  size:3,
  OPC::smlal, OPC::rsc_regreg, OPC::rsc_regimm,
  // cluster 15  size:3,
  OPC::smlals, OPC::rscs_regreg, OPC::rscs_regimm,
  // cluster 16  size:8,
  OPC::smlabb, OPC::smlatb, OPC::smlabt, OPC::smlatt, OPC::strh_reg_sub, OPC::ldrd_reg_sub, OPC::strd_reg_sub, OPC::swp,
  // cluster 17  size:5,
  OPC::ldrh_reg_sub, OPC::ldrsb_reg_sub, OPC::ldrsh_reg_sub, OPC::tst_regreg, OPC::tst_regimm,
  // cluster 18  size:5,
  OPC::strh_reg_sub_pre, OPC::ldrd_reg_sub_pre, OPC::strd_reg_sub_pre, OPC::bx, OPC::blx_reg,
  // cluster 19  size:5,
  OPC::ldrh_reg_sub_pre, OPC::ldrsb_reg_sub_pre, OPC::ldrsh_reg_sub_pre, OPC::teq_regreg, OPC::teq_regimm,
  // cluster 20  size:4,
  OPC::strh_imm_sub, OPC::ldrd_imm_sub, OPC::strd_imm_sub, OPC::swpb,
  // cluster 21  size:5,
  OPC::ldrh_imm_sub, OPC::ldrsb_imm_sub, OPC::ldrsh_imm_sub, OPC::cmp_regreg, OPC::cmp_regimm,
  // cluster 22  size:8,
  OPC::smulbb, OPC::smultb, OPC::smulbt, OPC::smultt, OPC::strh_imm_sub_pre, OPC::ldrd_imm_sub_pre, OPC::strd_imm_sub_pre, OPC::clz,
  // cluster 23  size:5,
  OPC::ldrh_imm_sub_pre, OPC::ldrsb_imm_sub_pre, OPC::ldrsh_imm_sub_pre, OPC::cmn_regreg, OPC::cmn_regimm,
  // cluster 24  size:6,
  OPC::strex, OPC::strh_reg_add, OPC::ldrd_reg_add, OPC::strd_reg_add, OPC::orr_regreg, OPC::orr_regimm,
  // cluster 25  size:6,
  OPC::ldrex, OPC::ldrh_reg_add, OPC::ldrsb_reg_add, OPC::ldrsh_reg_add, OPC::orrs_regreg, OPC::orrs_regimm,
  // cluster 26  size:5,
  OPC::strh_reg_add_pre, OPC::ldrd_reg_add_pre, OPC::strd_reg_add_pre, OPC::mov_regreg, OPC::mov_regimm,
  // cluster 27  size:5,
  OPC::ldrh_reg_add_pre, OPC::ldrsb_reg_add_pre, OPC::ldrsh_reg_add_pre, OPC::movs_regreg, OPC::movs_regimm,
  // cluster 28  size:6,
  OPC::strexb, OPC::strh_imm_add, OPC::ldrd_imm_add, OPC::strd_imm_add, OPC::bic_regreg, OPC::bic_regimm,
  // cluster 29  size:6,
  OPC::ldrexb, OPC::ldrh_imm_add, OPC::ldrsb_imm_add, OPC::ldrsh_imm_add, OPC::bics_regreg, OPC::bics_regimm,
  // cluster 30  size:6,
  OPC::strexh, OPC::strh_imm_add_pre, OPC::ldrd_imm_add_pre, OPC::strd_imm_add_pre, OPC::mvn_regreg, OPC::mvn_regimm,
  // cluster 31  size:6,
  OPC::ldrexh, OPC::ldrh_imm_add_pre, OPC::ldrsb_imm_add_pre, OPC::ldrsh_imm_add_pre, OPC::mvns_regreg, OPC::mvns_regimm,
  // cluster 32  size:1,
  OPC::and_imm,
  // cluster 33  size:1,
  OPC::ands_imm,
  // cluster 34  size:1,
  OPC::eor_imm,
  // cluster 35  size:1,
  OPC::eors_imm,
  // cluster 36  size:1,
  OPC::sub_imm,
  // cluster 37  size:1,
  OPC::subs_imm,
  // cluster 38  size:1,
  OPC::rsb_imm,
  // cluster 39  size:1,
  OPC::rsbs_imm,
  // cluster 40  size:1,
  OPC::add_imm,
  // cluster 41  size:1,
  OPC::adds_imm,
  // cluster 42  size:1,
  OPC::adc_imm,
  // cluster 43  size:1,
  OPC::adcs_imm,
  // cluster 44  size:1,
  OPC::sbc_imm,
  // cluster 45  size:1,
  OPC::sbcs_imm,
  // cluster 46  size:1,
  OPC::rsc_imm,
  // cluster 47  size:1,
  OPC::rscs_imm,
  // cluster 48  size:1,
  OPC::movw,
  // cluster 49  size:1,
  OPC::tst_imm,
  // cluster 50  size:0,
  // cluster 51  size:1,
  OPC::teq_imm,
  // cluster 52  size:1,
  OPC::movt,
  // cluster 53  size:1,
  OPC::cmp_imm,
  // cluster 54  size:0,
  // cluster 55  size:1,
  OPC::cmn_imm,
  // cluster 56  size:1,
  OPC::orr_imm,
  // cluster 57  size:1,
  OPC::orrs_imm,
  // cluster 58  size:1,
  OPC::mov_imm,
  // cluster 59  size:1,
  OPC::movs_imm,
  // cluster 60  size:1,
  OPC::bic_imm,
  // cluster 61  size:1,
  OPC::bics_imm,
  // cluster 62  size:1,
  OPC::mvn_imm,
  // cluster 63  size:1,
  OPC::mvns_imm,
  // cluster 64  size:1,
  OPC::str_imm_sub_post,
  // cluster 65  size:1,
  OPC::ldr_imm_sub_post,
  // cluster 66  size:0,
  // cluster 67  size:0,
  // cluster 68  size:1,
  OPC::strb_imm_sub_post,
  // cluster 69  size:2,
  OPC::ldp_imm_sub_post, OPC::ldrb_imm_sub_post,
  // cluster 70  size:0,
  // cluster 71  size:0,
  // cluster 72  size:1,
  OPC::str_imm_add_post,
  // cluster 73  size:1,
  OPC::ldr_imm_add_post,
  // cluster 74  size:0,
  // cluster 75  size:0,
  // cluster 76  size:1,
  OPC::strb_imm_add_post,
  // cluster 77  size:2,
  OPC::ldp_imm_add_post, OPC::ldrb_imm_add_post,
  // cluster 78  size:0,
  // cluster 79  size:0,
  // cluster 80  size:1,
  OPC::str_imm_sub,
  // cluster 81  size:1,
  OPC::ldr_imm_sub,
  // cluster 82  size:1,
  OPC::str_imm_sub_pre,
  // cluster 83  size:1,
  OPC::ldr_imm_sub_pre,
  // cluster 84  size:1,
  OPC::strb_imm_sub,
  // cluster 85  size:2,
  OPC::ldp_imm_sub, OPC::ldrb_imm_sub,
  // cluster 86  size:1,
  OPC::strb_imm_sub_pre,
  // cluster 87  size:2,
  OPC::ldp_imm_sub_pre, OPC::ldrb_imm_sub_pre,
  // cluster 88  size:1,
  OPC::str_imm_add,
  // cluster 89  size:1,
  OPC::ldr_imm_add,
  // cluster 90  size:1,
  OPC::str_imm_add_pre,
  // cluster 91  size:1,
  OPC::ldr_imm_add_pre,
  // cluster 92  size:1,
  OPC::strb_imm_add,
  // cluster 93  size:2,
  OPC::ldp_imm_add, OPC::ldrb_imm_add,
  // cluster 94  size:1,
  OPC::strb_imm_add_pre,
  // cluster 95  size:2,
  OPC::ldp_imm_add_pre, OPC::ldrb_imm_add_pre,
  // cluster 96  size:1,
  OPC::str_reg_sub_post,
  // cluster 97  size:1,
  OPC::ldr_reg_sub_post,
  // cluster 98  size:0,
  // cluster 99  size:0,
  // cluster 100  size:1,
  OPC::strb_reg_sub_post,
  // cluster 101  size:2,
  OPC::ldp_reg_sub_post, OPC::ldrb_reg_sub_post,
  // cluster 102  size:0,
  // cluster 103  size:0,
  // cluster 104  size:3,
  OPC::sxtb16, OPC::sxtab16, OPC::str_reg_add_post,
  // cluster 105  size:1,
  OPC::ldr_reg_add_post,
  // cluster 106  size:2,
  OPC::sxtb, OPC::sxtab,
  // cluster 107  size:4,
  OPC::sxth, OPC::sxtah, OPC::rev, OPC::rev16,
  // cluster 108  size:3,
  OPC::uxtb16, OPC::uxtab16, OPC::strb_reg_add_post,
  // cluster 109  size:2,
  OPC::ldp_reg_add_post, OPC::ldrb_reg_add_post,
  // cluster 110  size:2,
  OPC::uxtb, OPC::uxtab,
  // cluster 111  size:3,
  OPC::uxth, OPC::uxtah, OPC::rbit,
  // cluster 112  size:1,
  OPC::str_reg_sub,
  // cluster 113  size:2,
  OPC::sdiv, OPC::ldr_reg_sub,
  // cluster 114  size:1,
  OPC::str_reg_sub_pre,
  // cluster 115  size:2,
  OPC::udiv, OPC::ldr_reg_sub_pre,
  // cluster 116  size:1,
  OPC::strb_reg_sub,
  // cluster 117  size:2,
  OPC::ldp_reg_sub, OPC::ldrb_reg_sub,
  // cluster 118  size:1,
  OPC::strb_reg_sub_pre,
  // cluster 119  size:2,
  OPC::ldp_reg_sub_pre, OPC::ldrb_reg_sub_pre,
  // cluster 120  size:1,
  OPC::str_reg_add,
  // cluster 121  size:1,
  OPC::ldr_reg_add,
  // cluster 122  size:1,
  OPC::str_reg_add_pre,
  // cluster 123  size:1,
  OPC::ldr_reg_add_pre,
  // cluster 124  size:1,
  OPC::strb_reg_add,
  // cluster 125  size:2,
  OPC::ldp_reg_add, OPC::ldrb_reg_add,
  // cluster 126  size:1,
  OPC::strb_reg_add_pre,
  // cluster 127  size:3,
  OPC::ldp_reg_add_pre, OPC::ldrb_reg_add_pre, OPC::ud2,
  // cluster 128  size:1,
  OPC::stmda,
  // cluster 129  size:1,
  OPC::ldmda,
  // cluster 130  size:1,
  OPC::stmda_update,
  // cluster 131  size:1,
  OPC::ldmda_update,
  // cluster 132  size:0,
  // cluster 133  size:0,
  // cluster 134  size:0,
  // cluster 135  size:0,
  // cluster 136  size:1,
  OPC::stmia,
  // cluster 137  size:1,
  OPC::ldmia,
  // cluster 138  size:1,
  OPC::stmia_update,
  // cluster 139  size:1,
  OPC::ldmia_update,
  // cluster 140  size:0,
  // cluster 141  size:0,
  // cluster 142  size:0,
  // cluster 143  size:0,
  // cluster 144  size:1,
  OPC::stmdb,
  // cluster 145  size:1,
  OPC::ldmdb,
  // cluster 146  size:1,
  OPC::stmdb_update,
  // cluster 147  size:1,
  OPC::ldmdb_update,
  // cluster 148  size:0,
  // cluster 149  size:0,
  // cluster 150  size:0,
  // cluster 151  size:0,
  // cluster 152  size:1,
  OPC::stmib,
  // cluster 153  size:1,
  OPC::ldmib,
  // cluster 154  size:1,
  OPC::stmib_update,
  // cluster 155  size:1,
  OPC::ldmib_update,
  // cluster 156  size:0,
  // cluster 157  size:0,
  // cluster 158  size:0,
  // cluster 159  size:0,
  // cluster 160  size:1,
  OPC::b,
  // cluster 161  size:1,
  OPC::b,
  // cluster 162  size:1,
  OPC::b,
  // cluster 163  size:1,
  OPC::b,
  // cluster 164  size:1,
  OPC::b,
  // cluster 165  size:1,
  OPC::b,
  // cluster 166  size:1,
  OPC::b,
  // cluster 167  size:1,
  OPC::b,
  // cluster 168  size:1,
  OPC::b,
  // cluster 169  size:1,
  OPC::b,
  // cluster 170  size:1,
  OPC::b,
  // cluster 171  size:1,
  OPC::b,
  // cluster 172  size:1,
  OPC::b,
  // cluster 173  size:1,
  OPC::b,
  // cluster 174  size:1,
  OPC::b,
  // cluster 175  size:1,
  OPC::b,
  // cluster 176  size:1,
  OPC::bl,
  // cluster 177  size:1,
  OPC::bl,
  // cluster 178  size:1,
  OPC::bl,
  // cluster 179  size:1,
  OPC::bl,
  // cluster 180  size:1,
  OPC::bl,
  // cluster 181  size:1,
  OPC::bl,
  // cluster 182  size:1,
  OPC::bl,
  // cluster 183  size:1,
  OPC::bl,
  // cluster 184  size:1,
  OPC::bl,
  // cluster 185  size:1,
  OPC::bl,
  // cluster 186  size:1,
  OPC::bl,
  // cluster 187  size:1,
  OPC::bl,
  // cluster 188  size:1,
  OPC::bl,
  // cluster 189  size:1,
  OPC::bl,
  // cluster 190  size:1,
  OPC::bl,
  // cluster 191  size:1,
  OPC::bl,
  // cluster 192  size:2,
  OPC::vstmda_s, OPC::vstmda_f,
  // cluster 193  size:2,
  OPC::vldmda_s, OPC::vldmda_f,
  // cluster 194  size:2,
  OPC::vstmda_s_update, OPC::vstmda_f_update,
  // cluster 195  size:2,
  OPC::vldmda_s_update, OPC::vldmda_f_update,
  // cluster 196  size:3,
  OPC::vmov_atof, OPC::vstmda_s, OPC::vstmda_f,
  // cluster 197  size:3,
  OPC::vmov_ftoa, OPC::vldmda_s, OPC::vldmda_f,
  // cluster 198  size:2,
  OPC::vstmda_s_update, OPC::vstmda_f_update,
  // cluster 199  size:2,
  OPC::vldmda_s_update, OPC::vldmda_f_update,
  // cluster 200  size:2,
  OPC::vstmia_s, OPC::vstmia_f,
  // cluster 201  size:2,
  OPC::vldmia_s, OPC::vldmia_f,
  // cluster 202  size:2,
  OPC::vstmia_s_update, OPC::vstmia_f_update,
  // cluster 203  size:2,
  OPC::vldmia_s_update, OPC::vldmia_f_update,
  // cluster 204  size:2,
  OPC::vstmia_s, OPC::vstmia_f,
  // cluster 205  size:2,
  OPC::vldmia_s, OPC::vldmia_f,
  // cluster 206  size:2,
  OPC::vstmia_s_update, OPC::vstmia_f_update,
  // cluster 207  size:2,
  OPC::vldmia_s_update, OPC::vldmia_f_update,
  // cluster 208  size:4,
  OPC::vstr_f32_sub, OPC::vstr_f64_sub, OPC::vstmdb_s, OPC::vstmdb_f,
  // cluster 209  size:4,
  OPC::vldr_f32_sub, OPC::vldr_f64_sub, OPC::vldmdb_s, OPC::vldmdb_f,
  // cluster 210  size:2,
  OPC::vstmdb_s_update, OPC::vstmdb_f_update,
  // cluster 211  size:2,
  OPC::vldmdb_s_update, OPC::vldmdb_f_update,
  // cluster 212  size:4,
  OPC::vstr_f32_sub, OPC::vstr_f64_sub, OPC::vstmdb_s, OPC::vstmdb_f,
  // cluster 213  size:4,
  OPC::vldr_f32_sub, OPC::vldr_f64_sub, OPC::vldmdb_s, OPC::vldmdb_f,
  // cluster 214  size:2,
  OPC::vstmdb_s_update, OPC::vstmdb_f_update,
  // cluster 215  size:2,
  OPC::vldmdb_s_update, OPC::vldmdb_f_update,
  // cluster 216  size:4,
  OPC::vstr_f32_add, OPC::vstr_f64_add, OPC::vstmib_s, OPC::vstmib_f,
  // cluster 217  size:4,
  OPC::vldr_f32_add, OPC::vldr_f64_add, OPC::vldmib_s, OPC::vldmib_f,
  // cluster 218  size:2,
  OPC::vstmib_s_update, OPC::vstmib_f_update,
  // cluster 219  size:2,
  OPC::vldmib_s_update, OPC::vldmib_f_update,
  // cluster 220  size:4,
  OPC::vstr_f32_add, OPC::vstr_f64_add, OPC::vstmib_s, OPC::vstmib_f,
  // cluster 221  size:4,
  OPC::vldr_f32_add, OPC::vldr_f64_add, OPC::vldmib_s, OPC::vldmib_f,
  // cluster 222  size:2,
  OPC::vstmib_s_update, OPC::vstmib_f_update,
  // cluster 223  size:2,
  OPC::vldmib_s_update, OPC::vldmib_f_update,
  // cluster 224  size:5,
  OPC::vmov_atos, OPC::vmls_f32, OPC::vmls_f64, OPC::vmla_f32, OPC::vmla_f64,
  // cluster 225  size:5,
  OPC::vmov_stoa, OPC::vnmls_f32, OPC::vnmls_f64, OPC::vnmla_f32, OPC::vnmla_f64,
  // cluster 226  size:4,
  OPC::vmul_f32, OPC::vmul_f64, OPC::vnmul_f32, OPC::vnmul_f64,
  // cluster 227  size:4,
  OPC::vadd_f32, OPC::vadd_f64, OPC::vsub_f32, OPC::vsub_f64,
  // cluster 228  size:4,
  OPC::vmls_f32, OPC::vmls_f64, OPC::vmla_f32, OPC::vmla_f64,
  // cluster 229  size:4,
  OPC::vnmls_f32, OPC::vnmls_f64, OPC::vnmla_f32, OPC::vnmla_f64,
  // cluster 230  size:4,
  OPC::vmul_f32, OPC::vmul_f64, OPC::vnmul_f32, OPC::vnmul_f64,
  // cluster 231  size:4,
  OPC::vadd_f32, OPC::vadd_f64, OPC::vsub_f32, OPC::vsub_f64,
  // cluster 232  size:2,
  OPC::vdiv_f32, OPC::vdiv_f64,
  // cluster 233  size:0,
  // cluster 234  size:0,
  // cluster 235  size:26,
  OPC::vcvt_f32_f64, OPC::vcvt_f64_f32, OPC::vcvt_s32_f64, OPC::vcvt_s32_f32, OPC::vcvt_u32_f64, OPC::vcvt_u32_f32, OPC::vcvt_f64_s32, OPC::vcvt_f32_s32, OPC::vcvt_f64_u32, OPC::vcvt_f32_u32, OPC::vcmp_f32, OPC::vcmp_f64, OPC::vcmp_f32_zero, OPC::vcmp_f64_zero, OPC::vcmpe_f32, OPC::vcmpe_f64, OPC::vcmpe_f32_zero, OPC::vcmpe_f64_zero, OPC::vabs_f32, OPC::vabs_f64, OPC::vmov_f32, OPC::vmov_f64, OPC::vsqrt_f32, OPC::vsqrt_f64, OPC::vneg_f32, OPC::vneg_f64,
  // cluster 236  size:2,
  OPC::vdiv_f32, OPC::vdiv_f64,
  // cluster 237  size:0,
  // cluster 238  size:0,
  // cluster 239  size:27,
  OPC::vcvt_f32_f64, OPC::vcvt_f64_f32, OPC::vcvt_s32_f64, OPC::vcvt_s32_f32, OPC::vcvt_u32_f64, OPC::vcvt_u32_f32, OPC::vcvt_f64_s32, OPC::vcvt_f32_s32, OPC::vcvt_f64_u32, OPC::vcvt_f32_u32, OPC::vcmp_f32, OPC::vcmp_f64, OPC::vcmp_f32_zero, OPC::vcmp_f64_zero, OPC::vcmpe_f32, OPC::vcmpe_f64, OPC::vcmpe_f32_zero, OPC::vcmpe_f64_zero, OPC::vabs_f32, OPC::vabs_f64, OPC::vmov_f32, OPC::vmov_f64, OPC::vsqrt_f32, OPC::vsqrt_f64, OPC::vneg_f32, OPC::vneg_f64, OPC::vmrs_APSR_nzcv_fpscr,
  // cluster 240  size:1,
  OPC::svc,
  // cluster 241  size:1,
  OPC::svc,
  // cluster 242  size:1,
  OPC::svc,
  // cluster 243  size:1,
  OPC::svc,
  // cluster 244  size:1,
  OPC::svc,
  // cluster 245  size:1,
  OPC::svc,
  // cluster 246  size:1,
  OPC::svc,
  // cluster 247  size:1,
  OPC::svc,
  // cluster 248  size:1,
  OPC::svc,
  // cluster 249  size:1,
  OPC::svc,
  // cluster 250  size:1,
  OPC::svc,
  // cluster 251  size:1,
  OPC::svc,
  // cluster 252  size:1,
  OPC::svc,
  // cluster 253  size:1,
  OPC::svc,
  // cluster 254  size:1,
  OPC::svc,
  // cluster 255  size:1,
  OPC::svc
};

const int16_t OpcodeTableJumper[] = {
0,
6,
12,
15,
18,
23,
28,
31,
33,
39,
45,
48,
51,
57,
63,
66,
69,
77,
82,
87,
92,
96,
101,
109,
114,
120,
126,
131,
136,
142,
148,
154,
160,
161,
162,
163,
164,
165,
166,
167,
168,
169,
170,
171,
172,
173,
174,
175,
176,
177,
178,
178,
179,
180,
181,
181,
182,
183,
184,
185,
186,
187,
188,
189,
190,
191,
192,
192,
192,
193,
195,
195,
195,
196,
197,
197,
197,
198,
200,
200,
200,
201,
202,
203,
204,
205,
207,
208,
210,
211,
212,
213,
214,
215,
217,
218,
220,
221,
222,
222,
222,
223,
225,
225,
225,
228,
229,
231,
235,
238,
240,
242,
245,
246,
248,
249,
251,
252,
254,
255,
257,
258,
259,
260,
261,
262,
264,
265,
268,
269,
270,
271,
272,
272,
272,
272,
272,
273,
274,
275,
276,
276,
276,
276,
276,
277,
278,
279,
280,
280,
280,
280,
280,
281,
282,
283,
284,
284,
284,
284,
284,
285,
286,
287,
288,
289,
290,
291,
292,
293,
294,
295,
296,
297,
298,
299,
300,
301,
302,
303,
304,
305,
306,
307,
308,
309,
310,
311,
312,
313,
314,
315,
316,
318,
320,
322,
324,
327,
330,
332,
334,
336,
338,
340,
342,
344,
346,
348,
350,
354,
358,
360,
362,
366,
370,
372,
374,
378,
382,
384,
386,
390,
394,
396,
398,
403,
408,
412,
416,
420,
424,
428,
432,
434,
434,
434,
460,
462,
462,
462,
489,
490,
491,
492,
493,
494,
495,
496,
497,
498,
499,
500,
501,
502,
503,
504,
505
};

constexpr const unsigned MNEMONIC_HASH_TABLE_SIZE = 512;
// Indexed by djb2 hash of mnemonic. Collisions are resolved via linear probing
static const OPC MnemonicHashTable[MNEMONIC_HASH_TABLE_SIZE] = {
   OPC::tst_regimm, OPC::invalid, OPC::subs_regimm, OPC::adcs_imm,
   OPC::subs_imm, OPC::vcmp_f32, OPC::vcmp_f32_zero, OPC::b,
   OPC::rsc_regreg, OPC::blx_reg, OPC::vldmia_f, OPC::invalid,
   OPC::ldmia, OPC::ldmib, OPC::ldmia_update, OPC::vstr_f64_sub,
   OPC::vcvt_f64_u32, OPC::vsub_f32, OPC::ldr_reg_sub_post, OPC::mul,
   OPC::vldmia_s, OPC::invalid, OPC::invalid, OPC::invalid,
   OPC::sbc_regreg, OPC::invalid, OPC::invalid, OPC::invalid,
   OPC::invalid, OPC::invalid, OPC::invalid, OPC::invalid,
   OPC::invalid, OPC::swpb, OPC::ldrsb_reg_sub, OPC::vldmda_f,
   OPC::invalid, OPC::smulls, OPC::bics_regimm, OPC::cmp_imm,
   OPC::ldrsh_reg_sub, OPC::invalid, OPC::invalid, OPC::ldrsb_imm_add_post,
   OPC::ldp_reg_sub, OPC::ands_imm, OPC::rsb_imm, OPC::uxtb16,
   OPC::sxtab16, OPC::sub_imm, OPC::ldrsh_imm_add_pre, OPC::ldr_reg_sub,
   OPC::ldr_reg_sub_pre, OPC::strb_imm_add_pre, OPC::ldrd_reg_add_pre, OPC::vsqrt_f32,
   OPC::vldmda_s, OPC::vldmib_s_update, OPC::ldrh_reg_add_pre, OPC::ldrd_imm_sub_post,
   OPC::ldrb_imm_sub_pre, OPC::strexb, OPC::vmov_f64, OPC::invalid,
   OPC::invalid, OPC::adds_regimm, OPC::rscs_imm, OPC::strexh,
   OPC::str_reg_add, OPC::vcvt_f64_f32, OPC::vstmib_f_update, OPC::invalid,
   OPC::vldmib_f, OPC::str_imm_sub, OPC::sub_regreg, OPC::vcmpe_f32,
   OPC::vstmda_s_update, OPC::orrs_imm, OPC::str_imm_add_post, OPC::str_imm_sub_pre,
   OPC::vldr_f32_sub, OPC::invalid, OPC::strd_imm_sub_post, OPC::sbcs_imm,
   OPC::invalid, OPC::bic_imm, OPC::vldmib_s, OPC::invalid,
   OPC::mvn_imm, OPC::rev16, OPC::ldrh_reg_sub_post, OPC::invalid,
   OPC::invalid, OPC::invalid, OPC::invalid, OPC::invalid,
   OPC::invalid, OPC::invalid, OPC::invalid, OPC::vmov_stoa,
   OPC::vldmdb_f, OPC::strb_reg_add, OPC::vstr_f32_add, OPC::strd_reg_add,
   OPC::invalid, OPC::invalid, OPC::vcmp_f64, OPC::strh_reg_add,
   OPC::strb_imm_sub, OPC::strd_imm_sub, OPC::ldrsb_imm_sub_pre, OPC::ldrsh_reg_add_pre,
   OPC::adc_imm, OPC::strh_reg_sub_post, OPC::strh_imm_sub, OPC::strd_imm_sub_pre,
   OPC::umull, OPC::ldrd_reg_add_post, OPC::clz, OPC::strh_imm_sub_pre,
   OPC::teq_imm, OPC::ldr_imm_sub_post, OPC::ldrb_reg_sub_pre, OPC::strex,
   OPC::adcs_regreg, OPC::sdiv, OPC::strb_reg_add_pre, OPC::rsbs_regimm,
   OPC::cmp_regreg, OPC::vldr_f64_add, OPC::vsub_f64, OPC::vnmls_f32,
   OPC::vmls_f32, OPC::vldmdb_s, OPC::eor_regreg, OPC::vldmdb_f_update,
   OPC::invalid, OPC::invalid, OPC::teq_regreg, OPC::str_reg_sub_pre,
   OPC::strd_reg_add_post, OPC::adc_regimm, OPC::vstmia_s_update, OPC::invalid,
   OPC::invalid, OPC::invalid, OPC::invalid, OPC::vmul_f32,
   OPC::ldrb_reg_sub_post, OPC::vsqrt_f64, OPC::smlabb, OPC::invalid,
   OPC::invalid, OPC::invalid, OPC::invalid, OPC::invalid,
   OPC::invalid, OPC::invalid, OPC::invalid, OPC::invalid,
   OPC::invalid, OPC::vnmul_f32, OPC::invalid, OPC::adds_imm,
   OPC::invalid, OPC::invalid, OPC::ldrsb_imm_add, OPC::stmib_update,
   OPC::smlabt, OPC::ldrsb_reg_sub_pre, OPC::add_regreg, OPC::bics_imm,
   OPC::ldrsh_imm_add, OPC::movt, OPC::strd_reg_sub_pre, OPC::rsc_imm,
   OPC::ldrd_reg_add, OPC::movw, OPC::strh_reg_sub_pre, OPC::and_regreg,
   OPC::ldrh_reg_add, OPC::bic_regimm, OPC::ldrd_imm_sub, OPC::strb_reg_sub_post,
   OPC::ldr_reg_add_post, OPC::ldrb_imm_sub, OPC::ldrh_imm_sub, OPC::rscs_regreg,
   OPC::ldrb_reg_add, OPC::ldp_imm_add, OPC::cmn_regreg, OPC::ldrh_imm_sub_post,
   OPC::umlal, OPC::sbc_imm, OPC::tst_imm, OPC::ldr_imm_add,
   OPC::ldr_imm_add_pre, OPC::stmda_update, OPC::ands_regreg, OPC::vcvt_u32_f32,
   OPC::vcvt_f32_s32, OPC::vcmpe_f64, OPC::smulbb, OPC::sbcs_regreg,
   OPC::movs_imm, OPC::rsc_regimm, OPC::vneg_f32, OPC::vadd_f32,
   OPC::ldp_reg_sub_post, OPC::vldmda_s_update, OPC::vldmib_f_update, OPC::orr_regreg,
   OPC::invalid, OPC::invalid, OPC::strh_imm_sub_post, OPC::vmls_f64,
   OPC::invalid, OPC::invalid, OPC::ldrd_imm_add_post, OPC::vstmda_f_update,
   OPC::smulbt, OPC::sbc_regimm, OPC::invalid, OPC::mla,
   OPC::invalid, OPC::invalid, OPC::invalid, OPC::invalid,
   OPC::ldrex, OPC::mvns_regreg, OPC::muls, OPC::orrs_regreg,
   OPC::smlatb, OPC::sxtb, OPC::uxtab, OPC::vnmls_f64,
   OPC::sxth, OPC::ldrsh_reg_sub_post, OPC::sxtb16, OPC::uxtah,
   OPC::add_imm, OPC::mls, OPC::strd_imm_add_post, OPC::ldr_reg_add_pre,
   OPC::ldmib_update, OPC::vcmpe_f64_zero, OPC::ldp_imm_sub_pre, OPC::invalid,
   OPC::vmul_f64, OPC::ldrh_reg_add_post, OPC::smlatt, OPC::eors_regreg,
   OPC::ldrb_imm_sub_post, OPC::ldrb_imm_add_pre, OPC::stmda, OPC::stmdb,
   OPC::invalid, OPC::invalid, OPC::invalid, OPC::invalid,
   OPC::str_reg_sub, OPC::movs_regreg, OPC::vnmul_f64, OPC::invalid,
   OPC::invalid, OPC::ldmda_update, OPC::invalid, OPC::mvns_imm,
   OPC::invalid, OPC::invalid, OPC::str_imm_add_pre, OPC::sub_regimm,
   OPC::strh_reg_add_post, OPC::mvn_regreg, OPC::mov_regreg, OPC::strb_imm_sub_post,
   OPC::vcvt_u32_f64, OPC::invalid, OPC::ldr_imm_add_post, OPC::vldmia_s_update,
   OPC::invalid, OPC::invalid, OPC::invalid, OPC::vabs_f32,
   OPC::smultb, OPC::invalid, OPC::invalid, OPC::invalid,
   OPC::vstmia_f_update, OPC::invalid, OPC::invalid, OPC::invalid,
   OPC::vneg_f64, OPC::cmn_imm, OPC::strb_reg_sub, OPC::ldrsb_reg_sub_post,
   OPC::strd_reg_sub, OPC::rsb_regreg, OPC::vstr_f32_sub, OPC::vcvt_s32_f32,
   OPC::strh_reg_sub, OPC::ldrsb_imm_add_pre, OPC::smultt, OPC::vcvt_f32_u32,
   OPC::invalid, OPC::ldp_reg_sub_pre, OPC::mlas, OPC::umlals,
   OPC::strd_imm_add_pre, OPC::ldp_imm_sub_post, OPC::strh_imm_add_pre, OPC::ldrb_reg_add_post,
   OPC::ldrb_reg_add_pre, OPC::vldr_f64_sub, OPC::and_imm, OPC::tst_regreg,
   OPC::ldrd_imm_sub_pre, OPC::subs_regreg, OPC::udiv, OPC::vadd_f64,
   OPC::ldrh_imm_sub_pre, OPC::eors_imm, OPC::adcs_regimm, OPC::invalid,
   OPC::invalid, OPC::cmp_regimm, OPC::invalid, OPC::invalid,
   OPC::vdiv_f32, OPC::str_reg_sub_post, OPC::strb_reg_add_post, OPC::eor_regimm,
   OPC::str_reg_add_pre, OPC::vstr_f64_add, OPC::invalid, OPC::teq_regimm,
   OPC::invalid, OPC::invalid, OPC::ldrsh_imm_sub_post, OPC::rev,
   OPC::bl, OPC::invalid, OPC::invalid, OPC::invalid,
   OPC::invalid, OPC::invalid, OPC::orr_imm, OPC::invalid,
   OPC::invalid, OPC::invalid, OPC::ldrh_imm_add_post, OPC::bx,
   OPC::vmla_f32, OPC::ldrsb_reg_add, OPC::bics_regreg, OPC::vstmia_f,
   OPC::vldmda_f_update, OPC::invalid, OPC::invalid, OPC::umulls,
   OPC::ldrsb_imm_sub, OPC::ldrsh_reg_add, OPC::ldrsb_reg_add_pre, OPC::ldp_reg_add,
   OPC::ldr_reg_add, OPC::ldrsh_imm_sub, OPC::strd_reg_add_pre, OPC::add_regimm,
   OPC::ldp_reg_add_post, OPC::ldrd_reg_sub, OPC::smull, OPC::ldrsh_imm_sub_pre,
   OPC::strh_reg_add_pre, OPC::strh_imm_add_post, OPC::ldrh_reg_sub, OPC::ldrd_reg_sub_pre,
   OPC::and_regimm, OPC::ldrb_reg_sub, OPC::ldp_imm_sub, OPC::ldrh_reg_sub_pre,
   OPC::adds_regreg, OPC::ldr_imm_sub, OPC::strb_imm_sub_pre, OPC::ldmda,
   OPC::rscs_regimm, OPC::ldmdb, OPC::vmov_ftoa, OPC::cmn_regimm,
   OPC::vcmpe_f32_zero, OPC::vabs_f64, OPC::vnmla_f32, OPC::vstmda_s,
   OPC::str_imm_add, OPC::vcmp_f64_zero, OPC::vstmda_f, OPC::ands_regimm,
   OPC::ldrsb_imm_sub_post, OPC::ldrsh_reg_add_post, OPC::vcvt_s32_f64, OPC::vldr_f32_add,
   OPC::sbcs_regimm, OPC::vcvt_f64_s32, OPC::vstmia_s, OPC::vstmdb_s_update,
   OPC::vmrs_APSR_nzcv_fpscr, OPC::invalid, OPC::rbit, OPC::vmov_atof,
   OPC::orr_regimm, OPC::ldrb_imm_add_post, OPC::invalid, OPC::invalid,
   OPC::invalid, OPC::invalid, OPC::invalid, OPC::vstmib_f,
   OPC::invalid, OPC::rsbs_imm, OPC::stmdb_update, OPC::stmia,
   OPC::stmib, OPC::vmov_atos, OPC::invalid, OPC::invalid,
   OPC::uxtb, OPC::mvns_regimm, OPC::strb_imm_add, OPC::orrs_regimm,
   OPC::strd_imm_add, OPC::strb_reg_sub_pre, OPC::ldrsh_reg_sub_pre, OPC::uxth,
   OPC::strh_imm_add, OPC::uxtab16, OPC::str_imm_sub_post, OPC::strb_imm_add_post,
   OPC::ud2, OPC::ldp_imm_add_pre, OPC::svc, OPC::vdiv_f64,
   OPC::vstmib_s, OPC::vldmia_f_update, OPC::rsbs_regreg, OPC::vstmdb_f,
   OPC::vstmib_s_update, OPC::invalid, OPC::smlal, OPC::eors_regimm,
   OPC::invalid, OPC::vcvt_f32_f64, OPC::invalid, OPC::invalid,
   OPC::vmla_f64, OPC::stmia_update, OPC::ldrexb, OPC::ldrsb_reg_add_post,
   OPC::adc_regreg, OPC::vstmdb_s, OPC::movs_regimm, OPC::invalid,
   OPC::ldrexh, OPC::invalid, OPC::invalid, OPC::invalid,
   OPC::invalid, OPC::invalid, OPC::vnmla_f64, OPC::invalid,
   OPC::ldp_imm_add_post, OPC::invalid, OPC::ldrd_reg_sub_post, OPC::mov_regimm,
   OPC::mvn_regimm, OPC::vmov_f32, OPC::invalid, OPC::invalid,
   OPC::invalid, OPC::invalid, OPC::invalid, OPC::swp,
   OPC::invalid, OPC::invalid, OPC::invalid, OPC::invalid,
   OPC::invalid, OPC::invalid, OPC::invalid, OPC::sxtab,
   OPC::str_reg_add_post, OPC::invalid, OPC::ldmdb_update, OPC::invalid,
   OPC::rsb_regimm, OPC::strd_reg_sub_post, OPC::eor_imm, OPC::bic_regreg,
   OPC::sxtah, OPC::smlals, OPC::ldrsh_imm_add_post, OPC::ldrb_imm_add,
   OPC::ldp_reg_add_pre, OPC::ldrd_imm_add, OPC::vldmdb_s_update, OPC::invalid,
   OPC::ldr_imm_sub_pre, OPC::ldrh_imm_add, OPC::mov_imm, OPC::ldrd_imm_add_pre,
   OPC::vstmdb_f_update, OPC::invalid, OPC::invalid, OPC::ldrh_imm_add_pre,
};


const char* const REG_ToStringMap[] = {
    "r0", // 0
    "r1", // 1
    "r2", // 2
    "r3", // 3
    "r4", // 4
    "r5", // 5
    "r6", // 6
    "r7", // 7
    "r8", // 8
    "r9", // 9
    "sl", // 10
    "fp", // 11
    "ip", // 12
    "sp", // 13
    "lr", // 14
    "pc", // 15
};
const char* EnumToString(REG x) { return REG_ToStringMap[unsigned(x)]; }


const char* const DREG_ToStringMap[] = {
    "d0", // 0
    "d1", // 1
    "d2", // 2
    "d3", // 3
    "d4", // 4
    "d5", // 5
    "d6", // 6
    "d7", // 7
    "d8", // 8
    "d9", // 9
    "d10", // 10
    "d11", // 11
    "d12", // 12
    "d13", // 13
    "d14", // 14
    "d15", // 15
};
const char* EnumToString(DREG x) { return DREG_ToStringMap[unsigned(x)]; }


const char* const SREG_ToStringMap[] = {
    "s0", // 0
    "s1", // 1
    "s2", // 2
    "s3", // 3
    "s4", // 4
    "s5", // 5
    "s6", // 6
    "s7", // 7
    "s8", // 8
    "s9", // 9
    "s10", // 10
    "s11", // 11
    "s12", // 12
    "s13", // 13
    "s14", // 14
    "s15", // 15
    "s16", // 16
    "s17", // 17
    "s18", // 18
    "s19", // 19
    "s20", // 20
    "s21", // 21
    "s22", // 22
    "s23", // 23
    "s24", // 24
    "s25", // 25
    "s26", // 26
    "s27", // 27
    "s28", // 28
    "s29", // 29
    "s30", // 30
    "s31", // 31
};
const char* EnumToString(SREG x) { return SREG_ToStringMap[unsigned(x)]; }


const char* const PRED_ToStringMap[] = {
    "eq", // 0
    "ne", // 1
    "cs", // 2
    "cc", // 3
    "mi", // 4
    "pl", // 5
    "vs", // 6
    "vc", // 7
    "hi", // 8
    "ls", // 9
    "ge", // 10
    "lt", // 11
    "gt", // 12
    "le", // 13
    "al", // 14
    "invalid_pred", // 15
};
const char* EnumToString(PRED x) { return PRED_ToStringMap[unsigned(x)]; }


const char* const SHIFT_ToStringMap[] = {
    "lsl", // 0
    "lsr", // 1
    "asr", // 2
    "ror", // 3
};
const char* EnumToString(SHIFT x) { return SHIFT_ToStringMap[unsigned(x)]; }


const char* const OK_ToStringMap[] = {
    "Invalid", // 0
    "REG_0_3", // 1
    "REG_8_11", // 2
    "REG_12_15", // 3
    "REG_16_19", // 4
    "REG_PAIR_12_15", // 5
    "DREG_0_3_5", // 6
    "DREG_12_15_22", // 7
    "DREG_16_19_7", // 8
    "SREG_0_3_5", // 9
    "SREG_12_15_22", // 10
    "SREG_16_19_7", // 11
    "SHIFT_MODE_5_6", // 12
    "REGLIST_0_15", // 13
    "REG_RANGE_0_7", // 14
    "REG_RANGE_1_7", // 15
    "PRED_28_31", // 16
    "IMM_0_7_TIMES_4", // 17
    "IMM_0_11", // 18
    "IMM_0_3_8_11", // 19
    "IMM_7_11", // 20
    "IMM_10_11_TIMES_8", // 21
    "IMM_0_23", // 22
    "IMM_0_7_8_11", // 23
    "IMM_FLT_ZERO", // 24
    "IMM_0_11_16_19", // 25
    "SIMM_0_23", // 26
};
const char* EnumToString(OK x) { return OK_ToStringMap[unsigned(x)]; }

// Indexed by OK
const FieldInfo FieldInfoTable[] = {
  {  // Invalid = 0
    {}, nullptr, "",
    nullptr, nullptr, 0, FK::NONE, 1, 0},
  {  // REG_0_3 = 1
    {{4, 0}}, REG_ToStringMap, "",
    nullptr, nullptr, 4, FK::LIST, 1, 16},
  {  // REG_8_11 = 2
    {{4, 8}}, REG_ToStringMap, "",
    nullptr, nullptr, 4, FK::LIST, 1, 16},
  {  // REG_12_15 = 3
    {{4, 12}}, REG_ToStringMap, "",
    nullptr, nullptr, 4, FK::LIST, 1, 16},
  {  // REG_16_19 = 4
    {{4, 16}}, REG_ToStringMap, "",
    nullptr, nullptr, 4, FK::LIST, 1, 16},
  {  // REG_PAIR_12_15 = 5
    {{4, 12}}, REG_ToStringMap, "",
    nullptr, nullptr, 4, FK::LIST, 1, 16},
  {  // DREG_0_3_5 = 6
    {{1, 5}, {4, 0}}, DREG_ToStringMap, "",
    nullptr, nullptr, 5, FK::LIST, 1, 16},
  {  // DREG_12_15_22 = 7
    {{1, 22}, {4, 12}}, DREG_ToStringMap, "",
    nullptr, nullptr, 5, FK::LIST, 1, 16},
  {  // DREG_16_19_7 = 8
    {{1, 7}, {4, 16}}, DREG_ToStringMap, "",
    nullptr, nullptr, 5, FK::LIST, 1, 16},
  {  // SREG_0_3_5 = 9
    {{4, 0}, {1, 5}}, SREG_ToStringMap, "",
    nullptr, nullptr, 5, FK::LIST, 1, 32},
  {  // SREG_12_15_22 = 10
    {{4, 12}, {1, 22}}, SREG_ToStringMap, "",
    nullptr, nullptr, 5, FK::LIST, 1, 32},
  {  // SREG_16_19_7 = 11
    {{4, 16}, {1, 7}}, SREG_ToStringMap, "",
    nullptr, nullptr, 5, FK::LIST, 1, 32},
  {  // SHIFT_MODE_5_6 = 12
    {{2, 5}}, SHIFT_ToStringMap, "",
    nullptr, nullptr, 2, FK::LIST, 1, 4},
  {  // REGLIST_0_15 = 13
    {{16, 0}}, nullptr, "reglist:",
    nullptr, nullptr, 16, FK::INT_HEX, 1, 0},
  {  // REG_RANGE_0_7 = 14
    {{8, 0}}, nullptr, "regrange:",
    nullptr, nullptr, 8, FK::INT, 1, 0},
  {  // REG_RANGE_1_7 = 15
    {{7, 1}}, nullptr, "regrange:",
    nullptr, nullptr, 7, FK::INT, 1, 0},
  {  // PRED_28_31 = 16
    {{4, 28}}, PRED_ToStringMap, "",
    nullptr, nullptr, 4, FK::LIST, 1, 16},
  {  // IMM_0_7_TIMES_4 = 17
    {{8, 0}}, nullptr, "",
    nullptr, nullptr, 8, FK::INT, 4, 0},
  {  // IMM_0_11 = 18
    {{12, 0}}, nullptr, "",
    nullptr, nullptr, 12, FK::INT, 1, 0},
  {  // IMM_0_3_8_11 = 19
    {{4, 8}, {4, 0}}, nullptr, "",
    nullptr, nullptr, 8, FK::INT, 1, 0},
  {  // IMM_7_11 = 20
    {{5, 7}}, nullptr, "",
    nullptr, nullptr, 5, FK::INT, 1, 0},
  {  // IMM_10_11_TIMES_8 = 21
    {{2, 10}}, nullptr, "",
    nullptr, nullptr, 2, FK::INT, 8, 0},
  {  // IMM_0_23 = 22
    {{24, 0}}, nullptr, "",
    nullptr, nullptr, 24, FK::INT, 1, 0},
  {  // IMM_0_7_8_11 = 23
    {{12, 0}}, nullptr, "",
    DecodeRotatedImm, EncodeRotatedImm, 12, FK::INT_SIGNED_CUSTOM, 1, 0},
  {  // IMM_FLT_ZERO = 24
    {}, nullptr, "",
    DecodeFloatZero, EncodeFloatZero, 0, FK::FLT_CUSTOM, 1, 0},
  {  // IMM_0_11_16_19 = 25
    {{4, 16}, {12, 0}}, nullptr, "",
    nullptr, nullptr, 16, FK::INT, 1, 0},
  {  // SIMM_0_23 = 26
    {{24, 0}}, nullptr, "",
    nullptr, nullptr, 24, FK::INT_SIGNED, 1, 0},
};

/* @AUTOGEN-END@ */

const Opcode* FindOpcode(uint32_t bit_value) {
  uint32_t discriminant = (bit_value >> 20) & 0xff;
  const unsigned start = OpcodeTableJumper[discriminant];
  const unsigned end = OpcodeTableJumper[discriminant + 1];
  for (unsigned i = start; i < end; ++i) {
    const struct Opcode* opc = &OpcodeTable[(unsigned)ClusteredOpcodeTable[i]];
    if ((opc->bit_mask & bit_value) == opc->bit_value) {
      return opc;
    }
  }
  return nullptr;
}

uint32_t DecodeRotatedImm(uint32_t data) {
  uint32_t x = data & 0xff;
  uint32_t rot = (data & 0xf00) >> 7;
  uint32_t mask = (1 << rot) - 1;
  return (x >> rot) | ((x & mask) << (32 - rot));
}

// Inverse of DecodeRotatedImm()
// returns -1 in case of failure
uint32_t EncodeRotatedImm(uint32_t x) {
  for (int r = 0; r < 16; ++r) {
    if ((x & 0xff) == x) {
      return (r << 8) | x;
    }
    // rotate left by 2
    x = (x << 2) | (x >> 30);
  }
  return kEncodeFailure;
}

uint32_t ExtractOperand(uint32_t data, OK ok) {
  const BitRange* bit_ranges = FieldInfoTable[uint8_t(ok)].ranges;

  uint32_t out = 0;
  for (unsigned i = 0; i < MAX_BIT_RANGES; ++i) {
    const BitRange* range = bit_ranges + i;
    if (range->width == 0) break;
    uint32_t mask = (1U << range->width) - 1;
    uint32_t x = (data >> range->position) & mask;
    out = x | out << range->width;
  }
  return out;
}

uint32_t DecodeOperand(uint32_t data, OK ok) {
  const FieldInfo& fi = FieldInfoTable[uint8_t(ok)];
  switch (fi.kind) {
    default:
    case FK::NONE:
      ASSERT(false, "unreachable");
      return 0;
    case FK::INT_SIGNED_CUSTOM:
    case FK::FLT_CUSTOM:
      return fi.decoder(data);

    case FK::INT_SIGNED:
      return SignedIntFromBits(data, fi.bitwidth);
    case FK::INT:
    case FK::INT_HEX:
      return data * fi.scale;
    case FK::LIST:
      // check length
      return data;
  }
}

bool IsSignedIntOfWidth(int32_t data, int32_t bitwidth) {
  uint32_t rest = data >> (bitwidth - 1);
  // rest must be all zeros or all ones.
  return rest == 0 || rest + 1 == (1U << (32 - bitwidth + 1));
}

uint32_t EncodeOperand(uint32_t data, OK ok) {
  const FieldInfo& fi = FieldInfoTable[uint8_t(ok)];
  switch (fi.kind) {
    default:
    case FK::NONE:
      ASSERT(false, "unreachable");
      return 0;
    case FK::INT_SIGNED_CUSTOM:
    case FK::FLT_CUSTOM:
      return fi.encoder(data);
    case FK::LIST:
      ASSERT(data < fi.num_names, "");
      return data;
    case FK::INT_SIGNED: {
      ASSERT(IsSignedIntOfWidth(data, fi.bitwidth), "");
      return data & ((1 << fi.bitwidth) - 1);
    }
    case FK::INT:
    case FK::INT_HEX:
      if (fi.scale != 1) {
        ASSERT(data % fi.scale == 0, "");
        data /= fi.scale;
      }
      ASSERT(data >> fi.bitwidth == 0, "");
      return data;
  }
}

void InsertOperand(int32_t x,
                   OK ok,
                   uint32_t* bits_value,
                   uint32_t* bits_mask) {
  const BitRange* bit_ranges = FieldInfoTable[uint8_t(ok)].ranges;
  // backwards is important
  for (int i = MAX_BIT_RANGES - 1; i >= 0; --i) {
    const BitRange* range = bit_ranges + i;
    if (range->width == 0) continue;
    const uint32_t mask = (1 << range->width) - 1;
    ASSERT(((mask << range->position) & *bits_mask) == 0, "");
    *bits_mask |= mask << range->position;
    *bits_value |= (x & mask) << range->position;
    x >>= range->width;
  }
  // TODO: fix this
  // ASSERT (x == 0, "overflow for: " << EnumToString(ok));
}

bool Disassemble(Ins* ins, uint32_t data) {
  const struct Opcode* opcode = FindOpcode(data);
  if (opcode == nullptr) return false;

  ins->opcode = opcode;
  for (unsigned i = 0; i < opcode->num_fields; ++i) {
    ins->operands[i] = ExtractOperand(data, opcode->fields[i]);
  }
  return true;
}

uint32_t Assemble(const Ins& ins) {
  const Opcode* opcode = ins.opcode;
  uint32_t value = opcode->bit_value;
  uint32_t mask = opcode->bit_mask;
  for (unsigned i = 0; i < opcode->num_fields; ++i) {
    const OK ok = ins.opcode->fields[i];
    ASSERT(ok != OK::Invalid, "");
    InsertOperand(ins.operands[i], ok, &value, &mask);
  }
  ASSERT(mask == 0xffffffff, "problems encoding " << opcode->name);
  return value;
}

uint32_t Patch(uint32_t ins_old, unsigned pos, int32_t value) {
  Ins ins;
  CHECK(Disassemble(&ins, ins_old), "");

  ins.operands[pos] = value;
  return Assemble(ins);
}

const Opcode* FindOpcodeForMnemonic(std::string_view s) {
  uint32_t h = 5381;
  for (uint8_t c : s) {
    h = (h << 5) + h + c;
  }
  h &= 0xffff;

  for (uint32_t d = 0; d < MNEMONIC_HASH_TABLE_SIZE; ++d) {
    OPC opc = MnemonicHashTable[(h + d) % MNEMONIC_HASH_TABLE_SIZE];
    if (opc == OPC::invalid) return nullptr;
    auto* opcode = &OpcodeTable[uint32_t(opc)];
    if (opcode->enum_name == s) return opcode;
  }
  return nullptr;
}

uint32_t SignedIntFromBits(uint32_t data, unsigned n_bits) {
  uint32_t mask = (1 << n_bits) - 1;
  data &= mask;
  bool is_neg = data & (1 << (n_bits - 1));
  return is_neg ? data - (1 << n_bits) : data;
}

}  // namespace cwerg::a32

#pragma once
// NOTE: this file is PARTIALLY autogenerated via: ./isel_tab.py gen_h
// (c) Robert Muth - see LICENSE for more info

#include <cstdint>

#include "Base/opcode_gen.h"
#include "Base/ir.h"
#include "BE/CpuA32/opcode_gen.h"
#include "BE/CodeGenA32/regs.h"

namespace cwerg::code_gen_a32 {
/* @AUTOGEN-START@ */

enum class IMM_CURB : uint8_t {
    invalid = 0,
    pos_8_bits_shifted = 1,
    neg_8_bits_shifted = 2,
    not_8_bits_shifted = 3,
    pos_5_bits = 4,
    pos_12_bits = 5,
    neg_12_bits = 6,
    pos_8_bits = 7,
    neg_8_bits = 8,
    pos_8_bits_times_4 = 9,
    neg_8_bits_times_4 = 10,
    pos_16_bits = 11,
    any_32_bits = 12,
    pos_stk_combo_8_bits_shifted = 13,
    pos_stk_combo_8_bits = 14,
    pos_stk_combo_8_bits_times_4 = 15,
    pos_stk_combo_12_bits = 16,
    pos_stk_combo_16_bits = 17,
    zero = 18,
};

enum class PARAM : uint8_t {
    invalid = 0,
    reg0 = 1,
    reg1 = 2,
    reg2 = 3,
    reg3 = 4,
    reg4 = 5,
    num0 = 6,
    num1 = 7,
    num2 = 8,
    num3 = 9,
    num4 = 10,
    num0_neg = 11,
    num1_neg = 12,
    num2_neg = 13,
    num3_neg = 14,
    num4_neg = 15,
    num0_not = 16,
    num1_not = 17,
    num2_not = 18,
    num1_lo16 = 19,
    num1_hi16 = 20,
    mem1_num2_lo16 = 21,
    mem1_num2_hi16 = 22,
    fun1_lo16 = 23,
    fun1_hi16 = 24,
    bbl0 = 25,
    bbl2 = 26,
    fun0 = 27,
    jtb1_lo16 = 28,
    jtb1_hi16 = 29,
    scratch_flt = 30,
    scratch_gpr = 31,
    ldm_regmask = 32,
    stm_regmask = 33,
    vldm_start = 34,
    vldm_count = 35,
    vstm_start = 36,
    vstm_count = 37,
    stk0_offset1 = 38,
    stk0_offset1_lo = 39,
    stk0_offset1_hi = 40,
    stk1_offset2 = 41,
    stk1_offset2_lo = 42,
    stk1_offset2_hi = 43,
    frame_size = 44,
};
/* @AUTOGEN-END@ */

struct InsTmpl {
  int32_t operands[a32::MAX_OPERANDS];  // signed because some operands need that (e.g. offsets)
  a32::OPC opcode;
  // bit i set: operands[i] is of enum type Param
  // bit i clr: operands[i] contains a number
  uint16_t template_mask;
};

struct Pattern {
  union {
    base::DK type_curbs[8];  // 8 >= MAX_OPERANDS
    uint64_t type_curbs_as_int;
  };
  IMM_CURB imm_curbs[8];    // 8 >= MAX_OPERANDS
  const InsTmpl* start;
  uint8_t length;
};

extern const Pattern* FindMatchingPattern(base::Ins ins);

const constexpr uint8_t MATCH_IMPOSSIBLE = 255;

extern uint8_t FindtImmediateMismatchesInBestMatchPattern(base::Ins ins,
                                                          bool assume_stk_op_matches);

extern a32::Ins MakeIns(a32::OPC opc_enum,
                 uint32_t x0 = 0,
                 uint32_t x1 = 0,
                 uint32_t x2 = 0,
                 uint32_t x3 = 0,
                 uint32_t x4 = 0,
                 uint32_t x5 = 0);

extern a32::Ins MakeInsFromTmpl(const InsTmpl& tmpl,
                 base::Ins ins,
                 const EmitContext& ctx);


extern const char* EnumToString(IMM_CURB x);
extern const char* EnumToString(PARAM x);

}  // namespace cwerg::code_gen_a32

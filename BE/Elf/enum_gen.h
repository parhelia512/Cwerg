#pragma once
// (c) Robert Muth - see LICENSE for more info
// NOTE: this file is PARTIALLY autogenerated via: ./enum_tab.py gen_h

#include <cstdint>

namespace cwerg::elf {

/* @AUTOGEN-START@ */

enum class EI_CLASS : uint8_t {
    NONE = 0,
    X_32 = 1,
    X_64 = 2,
};

enum class EI_DATA : uint8_t {
    NONE = 0,
    LSB2 = 1,
    MSB2 = 2,
};

enum class EI_VERSION : uint8_t {
    NONE = 0,
    CURRENT = 1,
};

enum class EI_OSABI : uint8_t {
    SYSV = 0,
    HPUX = 1,
    NETBSD = 2,
    LINUX = 3,
    HURD = 4,
    SOLARIS = 6,
    AIX = 7,
    IRIX = 8,
    FREEBSD = 9,
    TRU64 = 10,
    MODESTO = 11,
    OPENBSD = 12,
    OPENVMS = 13,
    NSK = 14,
    AROS = 15,
    FENIXOS = 16,
    CLOUD = 17,
    SORTIX = 53,
    ARM_AEABI = 64,
    ARM = 97,
};

enum class E_TYPE : uint16_t {
    NONE = 0,
    REL = 1,
    EXEC = 2,
    DYN = 3,
    CORE = 4,
};

enum class E_MACHINE : uint16_t {
    NONE = 0,
    M32 = 1,
    SPARC = 2,
    X_386 = 3,
    X_68K = 4,
    X_88K = 5,
    IAMCU = 6,
    X_860 = 7,
    MIPS = 8,
    S370 = 9,
    MIPS_RS3_LE = 10,
    PARISC = 15,
    VPP500 = 17,
    SPARC32PLUS = 18,
    X_960 = 19,
    PPC = 20,
    PPC64 = 21,
    S390 = 22,
    SPU = 23,
    V800 = 36,
    FR20 = 37,
    RH32 = 38,
    RCE = 39,
    ARM = 40,
    ALPHA = 41,
    SH = 42,
    SPARCV9 = 43,
    TRICORE = 44,
    ARC = 45,
    H8_300 = 46,
    H8_300H = 47,
    H8S = 48,
    H8_500 = 49,
    IA_64 = 50,
    MIPS_X = 51,
    COLDFIRE = 52,
    X_68HC12 = 53,
    MMA = 54,
    PCP = 55,
    NCPU = 56,
    NDR1 = 57,
    STARCORE = 58,
    ME16 = 59,
    ST100 = 60,
    TINYJ = 61,
    X86_64 = 62,
    PDSP = 63,
    PDP10 = 64,
    PDP11 = 65,
    FX66 = 66,
    ST9PLUS = 67,
    ST7 = 68,
    X_68HC16 = 69,
    X_68HC11 = 70,
    X_68HC08 = 71,
    X_68HC05 = 72,
    SVX = 73,
    ST19 = 74,
    VAX = 75,
    CRIS = 76,
    JAVELIN = 77,
    FIREPATH = 78,
    ZSP = 79,
    MMIX = 80,
    HUANY = 81,
    PRISM = 82,
    AVR = 83,
    FR30 = 84,
    D10V = 85,
    D30V = 86,
    V850 = 87,
    M32R = 88,
    MN10300 = 89,
    MN10200 = 90,
    PJ = 91,
    OPENRISC = 92,
    ARC_COMPACT = 93,
    XTENSA = 94,
    VIDEOCORE = 95,
    TMM_GPP = 96,
    NS32K = 97,
    TPC = 98,
    SNP1K = 99,
    ST200 = 100,
    IP2K = 101,
    MAX = 102,
    CR = 103,
    F2MC16 = 104,
    MSP430 = 105,
    BLACKFIN = 106,
    SE_C33 = 107,
    SEP = 108,
    ARCA = 109,
    UNICORE = 110,
    EXCESS = 111,
    DXP = 112,
    ALTERA_NIOS2 = 113,
    CRX = 114,
    XGATE = 115,
    C166 = 116,
    M16C = 117,
    DSPIC30F = 118,
    CE = 119,
    M32C = 120,
    TSK3000 = 131,
    RS08 = 132,
    SHARC = 133,
    ECOG2 = 134,
    SCORE7 = 135,
    DSP24 = 136,
    VIDEOCORE3 = 137,
    LATTICEMICO32 = 138,
    SE_C17 = 139,
    TI_C6000 = 140,
    TI_C2000 = 141,
    TI_C5500 = 142,
    TI_ARP32 = 143,
    TI_PRU = 144,
    MMDSP_PLUS = 160,
    CYPRESS_M8C = 161,
    R32C = 162,
    TRIMEDIA = 163,
    QDSP6 = 164,
    X_8051 = 165,
    STXP7X = 166,
    NDS32 = 167,
    ECOG1 = 168,
    MAXQ30 = 169,
    XIMO16 = 170,
    MANIK = 171,
    CRAYNV2 = 172,
    RX = 173,
    METAG = 174,
    MCST_ELBRUS = 175,
    ECOG16 = 176,
    CR16 = 177,
    ETPU = 178,
    SLE9X = 179,
    L10M = 180,
    K10M = 181,
    AARCH64 = 183,
    AVR32 = 185,
    STM8 = 186,
    TILE64 = 187,
    TILEPRO = 188,
    MICROBLAZE = 189,
    CUDA = 190,
    TILEGX = 191,
    CLOUDSHIELD = 192,
    COREA_1ST = 193,
    COREA_2ND = 194,
    ARC_COMPACT2 = 195,
    OPEN8 = 196,
    RL78 = 197,
    VIDEOCORE5 = 198,
    X_78KOR = 199,
    X_56800EX = 200,
    BA1 = 201,
    BA2 = 202,
    XCORE = 203,
    MCHP_PIC = 204,
    INTEL205 = 205,
    INTEL206 = 206,
    INTEL207 = 207,
    INTEL208 = 208,
    INTEL209 = 209,
    KM32 = 210,
    KMX32 = 211,
    KMX16 = 212,
    KMX8 = 213,
    KVARC = 214,
    CDP = 215,
    COGE = 216,
    COOL = 217,
    NORC = 218,
    CSR_KALIMBA = 219,
    Z80 = 220,
    VISIUM = 221,
    FT32 = 222,
    MOXIE = 223,
    AMDGPU = 224,
    RISCV = 243,
};

enum class E_FLAGS_ARM : uint32_t {
    RELEXEC = 1,
    HASENTRY = 2,
    SYMSARESORTED = 4,
    DYNSYMSUSESEGIDX = 8,
    MAPSYMSFIRST = 16,
    ABI_FLOAT_SOFT = 0x200,
    ABI_FLOAT_HARD = 0x400,
    LE8 = 0x400000,
    BE8 = 0x800000,
    EABI_VER1 = 0x1000000,
    EABI_VER2 = 0x2000000,
    EABI_VER4 = 0x4000000,
};

enum class SH_TYPE : uint32_t {
    X_NULL = 0,
    PROGBITS = 1,
    SYMTAB = 2,
    STRTAB = 3,
    RELA = 4,
    HASH = 5,
    DYNAMIC = 6,
    NOTE = 7,
    NOBITS = 8,
    REL = 9,
    SHLIB = 10,
    DYNSYM = 11,
    INIT_ARRAY = 14,
    FINI_ARRAY = 15,
    PREINIT_ARRAY = 16,
    GROUP = 17,
    SYMTAB_SHNDX = 18,
    NUM = 19,
    GNU_ATTRIBUTES = 0x6ffffff5,
    GNU_HASH = 0x6ffffff6,
    GNU_LIBLIST = 0x6ffffff7,
    GNU_verdef = 0x6ffffffd,
    GNU_verneed = 0x6ffffffe,
    GNU_versym = 0x6fffffff,
    ARM_EXIDX = 0x70000001,
    ARM_PREEMPTMAP = 0x70000002,
    ARM_ATTRIBUTES = 0x70000003,
    ARM_DEBUGOVERLAY = 0x70000004,
};

enum class SH_FLAGS : uint32_t {
    WRITE = 1,
    ALLOC = 2,
    EXECINSTR = 4,
    MERGE = 16,
    STRINGS = 32,
    INFO_LINK = 64,
    LINK_ORDER = 128,
    OS_NONCONFORMING = 0x100,
    GROUP = 0x200,
    TLS = 0x400,
    COMPRESSED = 0x800,
    KEEP = 0x200000,
};

enum class P_TYPE : uint32_t {
    X_NULL = 0,
    LOAD = 1,
    DYNAMIC = 2,
    INTERP = 3,
    NOTE = 4,
    SHLIB = 5,
    PHDR = 6,
    TLS = 7,
    GNU_EH_FRAME = 0x6474e550,
    GNU_STACK = 0x6474e551,
    GNU_RELRO = 0x6474e552,
    GNU_PROPERTY = 0x6474e553,
    ARM_ARCHEXT = 0x70000000,
    ARM_EXIDX = 0x70000001,
    ABIFLAGS = 0x70000003,
};

enum class P_FLAGS : uint32_t {
    X = 1,
    W = 2,
    R = 4,
};

enum class ST_INFO_BIND : uint8_t {
    LOCAL = 0,
    GLOBAL = 1,
    WEAK = 2,
    NUM = 3,
    GNU_UNIQUE = 10,
};

enum class ST_INFO_TYPE : uint8_t {
    NOTYPE = 0,
    OBJECT = 1,
    FUNC = 2,
    SECTION = 3,
    FILE = 4,
    COMMON = 5,
    TLS = 6,
    NUM = 7,
    RELC = 8,
    SRELC = 9,
    LOOS = 10,
    HIOS = 12,
    LOPROC = 13,
    HIPROC = 15,
};

enum class ST_VISIBILITY : uint8_t {
    DEFAULT = 0,
    INTERNAL = 1,
    HIDDEN = 2,
    PROTECTED = 3,
    EXPORTED = 4,
    SINGLETON = 5,
    ELIMINATE = 6,
};

enum class RELOC_TYPE_ARM : uint8_t {
    NONE = 0,
    PC24 = 1,
    ABS32 = 2,
    REL32 = 3,
    LDR_PC_G0 = 4,
    ABS16 = 5,
    ABS12 = 6,
    THM_ABS5 = 7,
    ABS8 = 8,
    SBREL32 = 9,
    THM_CALL = 10,
    THM_PC8 = 11,
    BREL_ADJ = 12,
    SWI24 = 13,
    THM_SWI8 = 14,
    XPC25 = 15,
    THM_XPC22 = 16,
    TLS_DTPMOD32 = 17,
    TLS_DTPOFF32 = 18,
    TLS_TPOFF32 = 19,
    COPY = 20,
    GLOB_DAT = 21,
    JUMP_SLOT = 22,
    RELATIVE = 23,
    GOTOFF32 = 24,
    BASE_PREL = 25,
    GOT_BREL = 26,
    PLT32 = 27,
    CALL = 28,
    JUMP24 = 29,
    THM_JUMP24 = 30,
    BASE_ABS = 31,
    ALU_PCREL_7_0 = 32,
    ALU_PCREL_15_8 = 33,
    ALU_PCREL_23_15 = 34,
    LDR_SBREL_11_0_NC = 35,
    ALU_SBREL_19_12_NC = 36,
    ALU_SBREL_27_20_CK = 37,
    TARGET1 = 38,
    SBREL31 = 39,
    V4BX = 40,
    TARGET2 = 41,
    PREL31 = 42,
    MOVW_ABS_NC = 43,
    MOVT_ABS = 44,
    MOVW_PREL_NC = 45,
    MOVT_PREL = 46,
    THM_MOVW_ABS_NC = 47,
    THM_MOVT_ABS = 48,
    THM_MOVW_PREL_NC = 49,
    THM_MOVT_PREL = 50,
    THM_JUMP19 = 51,
    THM_JUMP6 = 52,
    THM_ALU_PREL_11_0 = 53,
    THM_PC12 = 54,
    ABS32_NOI = 55,
    REL32_NOI = 56,
    ALU_PC_G0_NC = 57,
    ALU_PC_G0 = 58,
    ALU_PC_G1_NC = 59,
    ALU_PC_G1 = 60,
    ALU_PC_G2 = 61,
    LDR_PC_G1 = 62,
    LDR_PC_G2 = 63,
    LDRS_PC_G0 = 64,
    LDRS_PC_G1 = 65,
    LDRS_PC_G2 = 66,
    LDC_PC_G0 = 67,
    LDC_PC_G1 = 68,
    LDC_PC_G2 = 69,
    ALU_SB_G0_NC = 70,
    ALU_SB_G0 = 71,
    ALU_SB_G1_NC = 72,
    ALU_SB_G1 = 73,
    ALU_SB_G2 = 74,
    LDR_SB_G0 = 75,
    LDR_SB_G1 = 76,
    LDR_SB_G2 = 77,
    LDRS_SB_G0 = 78,
    LDRS_SB_G1 = 79,
    LDRS_SB_G2 = 80,
    LDC_SB_G0 = 81,
    LDC_SB_G1 = 82,
    LDC_SB_G2 = 83,
    MOVW_BREL_NC = 84,
    MOVT_BREL = 85,
    MOVW_BREL = 86,
    THM_MOVW_BREL_NC = 87,
    THM_MOVT_BREL = 88,
    THM_MOVW_BREL = 89,
    PLT32_ABS = 94,
    GOT_ABS = 95,
    GOT_PREL = 96,
    GOT_BREL12 = 97,
    GOTOFF12 = 98,
    GOTRELAX = 99,
    GNU_VTENTRY = 100,
    GNU_VTINHERIT = 101,
    THM_JUMP11 = 102,
    THM_JUMP8 = 103,
    TLS_GD32 = 104,
    TLS_LDM32 = 105,
    TLS_LDO32 = 106,
    TLS_IE32 = 107,
    TLS_LE32 = 108,
    TLS_LDO12 = 109,
    TLS_LE12 = 110,
    TLS_IE12GP = 111,
    PRIVATE_0 = 112,
    PRIVATE_1 = 113,
    PRIVATE_2 = 114,
    PRIVATE_3 = 115,
    PRIVATE_4 = 116,
    PRIVATE_5 = 117,
    PRIVATE_6 = 118,
    PRIVATE_7 = 119,
    PRIVATE_8 = 120,
    PRIVATE_9 = 121,
    PRIVATE_10 = 122,
    PRIVATE_11 = 123,
    PRIVATE_12 = 124,
    PRIVATE_13 = 125,
    PRIVATE_14 = 126,
    PRIVATE_15 = 127,
    ME_TOO = 128,
    THM_TLS_DESCSEQ16 = 129,
    THM_TLS_DESCSEQ32 = 130,
    THM_GOT_BREL12 = 131,
    IRELATIVE = 140,
};

enum class RELOC_TYPE_X86_64 : uint8_t {
    NONE = 0,
    X_64 = 1,
    PC32 = 2,
    GOT32 = 3,
    PLT32 = 4,
    COPY = 5,
    GLOB_DAT = 6,
    JUMP_SLOT = 7,
    RELATIVE = 8,
    GOTPCREL = 9,
    X_32 = 10,
    X_32S = 11,
    X_16 = 12,
    PC16 = 13,
    X_8 = 14,
    PC8 = 15,
    DTPMOD64 = 16,
    DTPOFF64 = 17,
    TPOFF64 = 18,
    TLSGD = 19,
    TLSLD = 20,
    DTPOFF32 = 21,
    GOTTPOFF = 22,
    TPOFF32 = 23,
    PC64 = 24,
    GOTOFF64 = 25,
    GOTPC32 = 26,
    GOT64 = 27,
    GOTPCREL64 = 28,
    GOTPC64 = 29,
    GOTPLT64 = 30,
    PLTOFF64 = 31,
    GOTPC32_TLSDESC = 34,
    TLSDESC_CALL = 35,
    TLSDESC = 36,
    IRELATIVE = 37,
    REX_GOTPCRELX = 42,
    GNU_VTINHERIT = 250,
    GNU_VTENTRY = 251,
};

enum class RELOC_TYPE_AARCH64 : uint16_t {
    NONE = 0x100,
    ABS64 = 0x101,
    ABS32 = 0x102,
    ABS16 = 0x103,
    PREL64 = 0x104,
    PREL32 = 0x105,
    PREL16 = 0x106,
    MOVW_UABS_G0 = 0x107,
    MOVW_UABS_G0_NC = 0x108,
    MOVW_UABS_G1 = 0x109,
    MOVW_UABS_G1_NC = 0x10a,
    MOVW_UABS_G2 = 0x10b,
    MOVW_UABS_G2_NC = 0x10c,
    MOVW_UABS_G3 = 0x10d,
    MOVW_SABS_G0 = 0x10e,
    MOVW_SABS_G1 = 0x10f,
    MOVW_SABS_G2 = 0x110,
    LD_PREL_LO19 = 0x111,
    ADR_PREL_LO21 = 0x112,
    ADR_PREL_PG_HI21 = 0x113,
    ADR_PREL_PG_HI21_NC = 0x114,
    ADD_ABS_LO12_NC = 0x115,
    LDST8_ABS_LO12_NC = 0x116,
    TSTBR14 = 0x117,
    CONDBR19 = 0x118,
    JUMP26 = 0x11a,
    CALL26 = 0x11b,
    LDST16_ABS_LO12_NC = 0x11c,
    LDST32_ABS_LO12_NC = 0x11d,
    LDST64_ABS_LO12_NC = 0x11e,
    MOVW_PREL_G0 = 0x11f,
    MOVW_PREL_G0_NC = 0x120,
    MOVW_PREL_G1 = 0x121,
    MOVW_PREL_G1_NC = 0x122,
    MOVW_PREL_G2 = 0x123,
    MOVW_PREL_G2_NC = 0x124,
    MOVW_PREL_G3 = 0x125,
    MOVW_GOTOFF_G0 = 0x12c,
    MOVW_GOTOFF_G0_NC = 0x12d,
    MOVW_GOTOFF_G1 = 0x12e,
    MOVW_GOTOFF_G1_NC = 0x12f,
    MOVW_GOTOFF_G2 = 0x130,
    MOVW_GOTOFF_G2_NC = 0x131,
    MOVW_GOTOFF_G3 = 0x132,
    GOTREL64 = 0x133,
    GOTREL32 = 0x134,
    GOT_LD_PREL19 = 0x135,
    LD64_GOTOFF_LO15 = 0x136,
    ADR_GOT_PAGE = 0x137,
    LD64_GOT_LO12_NC = 0x138,
    TLSGD_ADR_PREL21 = 0x200,
    TLSGD_ADR_PAGE21 = 0x201,
    TLSGD_ADD_LO12_NC = 0x202,
    TLSGD_MOVW_G1 = 0x203,
    TLSGD_MOVW_G0_NC = 0x204,
    TLSLD_ADR_PREL21 = 0x205,
    TLSLD_ADR_PAGE21 = 0x206,
    TLSLD_ADD_LO12_NC = 0x207,
    TLSLD_MOVW_G1 = 0x208,
    TLSLD_MOVW_G0_NC = 0x209,
    TLSLD_LD_PREL19 = 0x20a,
    TLSLD_MOVW_DTPREL_G2 = 0x20b,
    TLSLD_MOVW_DTPREL_G1 = 0x20c,
    TLSLD_MOVW_DTPREL_G1_NC = 0x20d,
    TLSLD_MOVW_DTPREL_G0 = 0x20e,
    TLSLD_MOVW_DTPREL_G0_NC = 0x20f,
    TLSLD_ADD_DTPREL_HI12 = 0x210,
    TLSLD_ADD_DTPREL_LO12 = 0x211,
    TLSLD_ADD_DTPREL_LO12_NC = 0x212,
    TLSLD_LDST8_DTPREL_LO12 = 0x213,
    TLSLD_LDST8_DTPREL_LO12_NC = 0x214,
    TLSLD_LDST16_DTPREL_LO12 = 0x215,
    TLSLD_LDST16_DTPREL_LO12_NC = 0x216,
    TLSLD_LDST32_DTPREL_LO12 = 0x217,
    TLSLD_LDST32_DTPREL_LO12_NC = 0x218,
    TLSLD_LDST64_DTPREL_LO12 = 0x219,
    TLSLD_LDST64_DTPREL_LO12_NC = 0x21a,
    TLSIE_MOVW_GOTTPREL_G1 = 0x21b,
    TLSIE_MOVW_GOTTPREL_G0_NC = 0x21c,
    TLSIE_ADR_GOTTPREL_PAGE21 = 0x21d,
    TLSIE_LD64_GOTTPREL_LO12_NC = 0x21e,
    TLSIE_LD_GOTTPREL_PREL19 = 0x21f,
    TLSLE_MOVW_TPREL_G2 = 0x220,
    TLSLE_MOVW_TPREL_G1 = 0x221,
    TLSLE_MOVW_TPREL_G1_NC = 0x222,
    TLSLE_MOVW_TPREL_G0 = 0x223,
    TLSLE_MOVW_TPREL_G0_NC = 0x224,
    TLSLE_ADD_TPREL_HI12 = 0x225,
    TLSLE_ADD_TPREL_LO12 = 0x226,
    TLSLE_ADD_TPREL_LO12_NC = 0x227,
    TLSLE_LDST8_TPREL_LO12 = 0x228,
    TLSLE_LDST8_TPREL_LO12_NC = 0x229,
    TLSLE_LDST16_TPREL_LO12 = 0x22a,
    TLSLE_LDST16_TPREL_LO12_NC = 0x22b,
    TLSLE_LDST32_TPREL_LO12 = 0x22c,
    TLSLE_LDST32_TPREL_LO12_NC = 0x22d,
    TLSLE_LDST64_TPREL_LO12 = 0x22e,
    TLSLE_LDST64_TPREL_LO12_NC = 0x22f,
    COPY = 0x400,
    GLOB_DAT = 0x401,
    JUMP_SLOT = 0x402,
    RELATIVE = 0x403,
    TLS_DTPREL64 = 0x404,
    TLS_DTPMOD64 = 0x405,
    TLS_TPREL64 = 0x406,
    TLS_DTPREL32 = 0x407,
    TLS_DTPMOD32 = 0x408,
    TLS_TPREL32 = 0x409,
};
/* @AUTOGEN-END@ */

extern const char* EnumToString(EI_CLASS x);
extern const char* EnumToString(EI_DATA x);
extern const char* EnumToString(EI_VERSION x);
extern const char* EnumToString(EI_OSABI x);
extern const char* EnumToString(E_TYPE x);
extern const char* EnumToString(E_MACHINE x);
extern const char* EnumToString(E_FLAGS_ARM x);
extern const char* EnumToString(SH_FLAGS x);
extern const char* EnumToString(P_FLAGS x);
extern const char* EnumToString(ST_INFO_BIND x);
extern const char* EnumToString(ST_INFO_TYPE x);
extern const char* EnumToString(ST_VISIBILITY x);
extern const char* EnumToString(RELOC_TYPE_ARM x) ;
extern const char* EnumToString(RELOC_TYPE_AARCH64 x);
extern const char* EnumToString(P_TYPE x);
extern const char* EnumToString(SH_TYPE x);

}  // namespace cwerg::elf
